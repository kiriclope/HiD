#+TITLE: Bump in the Dual Task
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/dual_task/dual_data/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
ESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: 2d7349e9-9e78-4be0-b7be-a0f3a3be2b42
:END:
:END:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')
  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  from scipy.stats import circmean

  from dual_data.common.fig_grid import create_grid
  from dual_data.overlap.get_cos import run_get_cos, plot_bump
  from dual_data.attractor.energy import run_energy, plot_energy 
  from dual_data.stats.bootstrap import my_boots_ci
  from dual_data.decode.bump import decode_bump, circcvl  
  from dual_data.preprocess.helpers import preprocess_X
  from dual_data.common.options import set_options
  from dual_data.common.plot_utils import add_vlines
  
#+end_src

#+RESULTS:

* Bump
** Parameters
#+begin_src ipython
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  kwargs = {'prescreen': 'fpr', 'pval': 0.05, 'trials': '', 'balance': 'under', 'laser':0,
            'method': 'bootstrap',
            'bolasso_pval':0.05, 'bolasso_penalty': 'l2',
            'bootstrap':False, 'n_boots': 1000,
            'preprocess': True, 'scaler_BL':'robust',
            'avg_noise': True, 'unit_var_BL':False,
            'clf': 'log_loss', 'scaler': None,
            'tol':0.001, 'penalty': 'l2',
            'shrinkage': 'auto',
            'class_weight': None, 'random_state': None,
            'in_fold': 'stratified', 'n_in': 10,
            'n_repeats': 10,
            'n_lambda': 20,
            }
#+end_src

#+RESULTS:

** Single mouse

#+begin_src ipython
  kwargs['mouse'] = 'ACCM03'
  kwargs['reload']= False
  kwargs['data_type'] = 'raw'
#+end_src

#+RESULTS:

*** Locations on the Ring
#+begin_src ipython  
  day = 'first'
  X_first, y_first, coefs_first = run_get_cos(day=day, **kwargs)

  day = 'last'
  kwargs['reload']= False 
  X_last, y_last, coefs_last = run_get_cos(day=day, **kwargs)
#+end_src

#+RESULTS:
#+begin_example
  loading files from /home/leon/dual_task/dual_data/data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN False AVG NOISE True UNIT VAR False
  ##########################################
  ##########################################
  MODEL: log_loss FOLDS stratified RESAMPLE under SCALER None PRESCREEN fpr PCA False METHOD bootstrap
  ##########################################
  DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (82, 361, 84) X_S2 (104, 361, 84)
  coefs dist (361,)
  non_zeros 169
  ##########################################
  MODEL: log_loss FOLDS stratified RESAMPLE under SCALER None PRESCREEN fpr PCA False METHOD bootstrap
  ##########################################
  DATA: FEATURES sample TASK all TRIALS correct DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (148, 361, 84) X_S2 (143, 361, 84)
  coefs sample (361,)
  non_zeros 212
  idx (361,) c_sample (361,)
  ##########################################
  DATA: FEATURES sample TASK DPA TRIALS  DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  ##########################################
  DATA: FEATURES sample TASK DualGo TRIALS  DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  ##########################################
  DATA: FEATURES sample TASK DualNoGo TRIALS  DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  Done
  (2, 361)
  loading files from /home/leon/dual_task/dual_data/data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN False AVG NOISE True UNIT VAR False
  ##########################################
  ##########################################
  MODEL: log_loss FOLDS stratified RESAMPLE under SCALER None PRESCREEN fpr PCA False METHOD bootstrap
  ##########################################
  DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (134, 361, 84) X_S2 (146, 361, 84)
  coefs dist (361,)
  non_zeros 169
  ##########################################
  MODEL: log_loss FOLDS stratified RESAMPLE under SCALER None PRESCREEN fpr PCA False METHOD bootstrap
  ##########################################
  DATA: FEATURES sample TASK all TRIALS correct DAYS last LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (216, 361, 84) X_S2 (214, 361, 84)
  coefs sample (361,)
  non_zeros 186
  idx (361,) c_sample (361,)
  ##########################################
  DATA: FEATURES sample TASK DPA TRIALS  DAYS last LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  ##########################################
  DATA: FEATURES sample TASK DualGo TRIALS  DAYS last LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  ##########################################
  DATA: FEATURES sample TASK DualNoGo TRIALS  DAYS last LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (80, 361, 84) X_S2 (80, 361, 84)
  Done
  (2, 361)
#+end_example

#+begin_src ipython
  print(X_first[2].shape)
#+end_src

#+RESULTS:
: (160, 361, 84)

*** Plot Bumps
#+begin_src ipython
    import matplotlib.pyplot as plt
    from matplotlib.patches import Ellipse

    width = np.std(coefs_last[0]) * 100.0
    height = np.std(coefs_last[1]) * 100.0

    max = np.max((width, height))

    print(width, height)
    # Example parameters for the ellipse: center at (1, 2), width 4, height 2, and angle of rotation 45 degrees
    ellipse = Ellipse(xy=(1, 2), width=width, height=height, angle=45, edgecolor='r', fc='None', lw=5)
    fig, ax = plt.subplots()

    # Add the ellipse to the axes
    ax.add_patch(ellipse)
    ax.set_xlim(-1, 3)
    ax.set_ylim(0, 4)

    # ax.set_xlim([-max, max])
    # ax.set_ylim([-max, max])
    plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: 2.360220926228741 1.9572298893980489
[[file:./.ob-jupyter/6acee6be563df85ac9f0fbc784e6f1f2b3e84548.png]]
:END:

#+begin_src ipython
  task = 0
  X_norm = X_first[task]
  # X_norm = preprocess_X(X, scaler="robust", avg_noise=0, unit_var=0)
  plot_bump(X_norm, y_first[task], 'all', int(X_first[task].shape[1] * .1))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d37bdd1dd88c3340bbbd152e9017f394611ca1ad.png]]

#+begin_src ipython
  X_norm = X_last[task]
  # X_norm = preprocess_X(X, scaler="robust", avg_noise=0, unit_var=0)
  plot_bump(X_norm, y_last[task], 'all', int(X_last[task].shape[1] * .1))
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/129af9929c54f8ca8dc19949e32e5f25bb1acac4.png]]

*** Save Data
#+begin_src ipython
  import pickle as pkl
  filename = "../data/" + kwargs['mouse'] + "/X_bump_first_" + kwargs['penalty'] + ".pkl"
  pkl.dump(X_first, open(filename + ".pkl", "wb"))

  filename = "../data/" + kwargs['mouse'] + "/y_bump_first_" + kwargs['penalty'] + ".pkl"
  pkl.dump(y_first, open(filename + ".pkl", "wb"))

  filename = "../data/" + kwargs['mouse'] + "/X_bump_last_" + kwargs['penalty'] + ".pkl"
  pkl.dump(X_last, open(filename + ".pkl", "wb"))

  filename = "../data/" + kwargs['mouse'] + "/y_bump_last_" + kwargs['penalty'] + ".pkl"
  pkl.dump(y_last, open(filename + ".pkl", "wb")) 
#+end_src

#+RESULTS:
*** Load Data
#+begin_src ipython
  filename = "../data/" + kwargs['mouse'] + "/X_bump_first_" + kwargs['penalty'] + ".pkl"
  X_first = pkl.load(open(filename + ".pkl", "rb"))

  filename = "../data/" + kwargs['mouse'] + "/y_bump_first_" + kwargs['penalty'] + ".pkl"
  y_first = pkl.load(open(filename + ".pkl", "rb"))

  filename = "../data/" + kwargs['mouse'] + "/X_bump_last_" + kwargs['penalty'] + ".pkl"
  X_last = pkl.load(open(filename + ".pkl", "rb"))

  filename = "../data/" + kwargs['mouse'] + "/y_bump_last_" + kwargs['penalty'] + ".pkl"
  y_last = pkl.load(open(filename + ".pkl", "rb")) 
#+end_src

#+RESULTS:

* Energy Landscape
#+begin_src ipython
  opts = set_options(T_WINDOW=0.0)

  # bins = np.concatenate( (opts['bins_BL'], opts['bins_ED'], opts['bins_MD'], opts['bins_LD']))
  # bins = np.concatenate( (opts['bins_BL'], opts['bins_STIM'], opts['bins_ED'], opts['bins_MD'], opts['bins_LD']))
  bins = np.concatenate( (opts['bins_STIM'], opts['bins_ED'], opts['bins_MD'], opts['bins_LD']))
  # bins = np.concatenate( (opts['bins_BL'], opts['bins_STIM'], opts['bins_ED']))
  # bins = np.concatenate( (opts['bins_ED'], opts['bins_MD'], opts['bins_LD']))

  # bins = np.concatenate( (opts['bins_BL'], opts['bins_STIM'], opts['bins_DELAY']))
  # bins = opts['bins_PRE_DIST']
  # bins = None
#+end_src

#+RESULTS:

** Parameters
#+begin_src ipython
  task = 'all'
  kwargs['task'] = task

  num_bins = int(0.1 * X_first[0].shape[1])
  num_bins = 60
  print('num_bins', num_bins)

  window = 0.1
  print('window', window)

  IF_HMM = 0
  n_iter = 100
  IF_BOOT=0
  IF_NORM=0
#+end_src

#+RESULTS:
: num_bins 60
: window 0.1

** Compute Energy

#+begin_src ipython
  def get_energy(X_, y_, task, num_bins, bins, window, IF_BOOT=0, IF_NORM=0, IF_HMM=0, n_iter=10):

    # X = []
    # for i in range(3):
    #   X_i = X_[i]
    #   X.append(X_i[y_[i]==1])

    # X = np.vstack(X)
    # print(X.shape)
    if task=='all':
      X = np.vstack(X_)
    elif task==13:
      X = np.vstack((X_[0], X_[-1]))
    else:
      X = X_[task]

    if IF_NORM:
        X = preprocess_X(X, scaler="robust", avg_noise=0, unit_var=0)

    if bins is not None:
      X = X[..., bins]

    ci_ = None
    energy_ = run_energy(X, num_bins, window, VERBOSE=0, IF_HMM=IF_HMM, n_iter=n_iter)
    if IF_BOOT:
        _, ci_ = my_boots_ci(X, lambda x: run_energy(x, num_bins, window, IF_HMM=IF_HMM, n_iter=n_iter), n_samples=1000)

    return energy_, ci_
#+end_src

#+RESULTS:

#+begin_src ipython
  def plot_landscape(energy_first, energy_last, ci_first, ci_last, SMOOTH=1, window=.1, **kwargs):
    fig, ax = plt.subplots()

    plot_energy(energy_first,  ci=ci_first, ax=ax, window=window, SMOOTH=SMOOTH, color='b')
    plot_energy(energy_last, ci=ci_last, ax=ax, window=window, SMOOTH=SMOOTH, color='r')
    # plt.ylim([0, .2])
    # plt.xlim([0, 270])
    plt.savefig("../figs/landscape/"+ kwargs['mouse'] + "_" + str(kwargs['task']) + '_trials_' + kwargs['penalty'] + '.svg', dpi=300)
    plt.show()   
#+end_src

#+RESULTS:

#+begin_src ipython
  energy_first, ci_first = get_energy(X_first, y_first, task, num_bins, bins, window, IF_BOOT, IF_NORM, IF_HMM, n_iter)
#+end_src

#+RESULTS:

#+begin_src ipython
  energy_last, ci_last = get_energy(X_last, y_last, task, num_bins, bins, window, IF_BOOT, IF_NORM, IF_HMM, n_iter)
#+end_src

#+RESULTS:

#+begin_src ipython
  SMOOTH = 1
  window = .1
  plot_landscape(energy_first, energy_last, ci_first, ci_last, SMOOTH, window, **kwargs)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d747ef02552600507380de06f60621140be28345.png]]

**** Diffusion
#+begin_src ipython
  phase_first = []
  phase_last = []

  for i in range(3):
      _, phi_first = decode_bump(X_first[i], axis=1)
      _, phi_last = decode_bump(X_last[i], axis=1)

      print(phi_first.shape)
      phase_first.append(phi_first)
      phase_last.append(phi_last)

  phase_first = np.stack(phase_first)
  phase_last = np.stack(phase_last)
#+end_src

#+RESULTS:
: (96, 84)
: (96, 84)
: (96, 84)

#+begin_src ipython
  print('phase_first', phase_first.shape, phase_first.min() * 180 / np.pi, phase_first.max() * 180 / np.pi)
#+end_src

#+RESULTS:
: phase_first (3, 96, 84) -179.99682078001987 179.99853893676223

#+begin_src ipython
  from scipy.stats import circstd
  def circ_std(X, y=None, axis=0):
      std = circstd(X[y==-1], axis=0) * 180 / np.pi
      std1 = circstd(X[y==1], axis=0) * 180 / np.pi
      
      std = (std + std1) / 2

      return std
#+end_src

#+RESULTS:

#+begin_src ipython
  task = 0
  
  std_first = circ_std(phase_first[task] + np.pi, y_first[task])
  _, ci_first = my_boots_ci(phase_first[task], lambda x: circ_std(x, y_first[task]))

  std_last = circ_std(phase_last[task] + np.pi, y_last[task])
  _, ci_last = my_boots_ci(phase_last[task], lambda x: circ_std(x, y_last[task]) ) 
#+end_src

#+RESULTS:
:RESULTS:
: bootstrap: 100% 1000/1000 [00:02<00:00, 456.09it/s]
: 
: bootstrap: 100% 1000/1000 [00:02<00:00, 479.13it/s]
:
:END:

#+begin_src ipython
  time = np.linspace(0, 14, 84)
  plt.plot(time, std_first, label='First')
  plt.fill_between(time, std_first-ci_first[:, 0], std_first+ci_first[:, 1], alpha=0.2)
  
  plt.plot(time, std_last, label='Last')
  plt.fill_between(time, std_last-ci_last[:,0], std_last+ci_last[:,1], alpha=0.2)

  plt.xlabel('Time Stim. Offset (s)');
  # plt.ylabel('$< \sqrt{\delta \phi^2}>_k$ (°)'); 
  plt.ylabel('Diffusion Error (°)');
  # plt.ylim([0, 120])
  # plt.yticks([0, 60, 120])
  # plt.xticks([3, 6, 9], [0, 3, 6])
  # plt.xlim([3, 9])

  plt.legend(fontsize=12)
  add_vlines()
  plt.savefig('diff_' + kwargs['mouse'] + '.svg', dpi=300)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c19842d3a46c4878844869793eef48fdab70aa19.png]]

#+begin_src ipython

#+end_src

#+begin_src ipython

#+end_src

#+RESULTS:


* model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"

  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  ini_list = np.arange(0, 10)
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [0, 180]

  rates = get_rates_ini_phi('lowR_ortho', ini_list, phi_list)
  rates_heter = get_rates_ini_phi('heter_10', ini_list, phi_list)
#+end_src

#+RESULTS:
: (10, 2, 15, 10000)
: (10, 2, 8499, 1000)

#+begin_src ipython
  X = np.vstack(rates)
  X = np.swapaxes(X, 1, -1)
  X = X[:, :7500]
  print(X.shape)
#+end_src

#+RESULTS:
: (20, 7500, 15)

#+begin_src ipython
  X_heter = np.vstack(rates_heter)
  X_heter = np.swapaxes(X_heter, 1, -1)
#+end_src

#+RESULTS:

#+begin_src ipython
  _, phase = decode_bump(X, axis=1)
  print(phase.shape)
#+end_src

#+RESULTS:
: (20, 15)

#+begin_src ipython
  for i in range(10):
      plt.plot(phase[i] * 180 / np.pi, alpha=.2)
      plt.plot(phase[-i] * 180 / np.pi, alpha=.2)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7ba1a028db691bfdc2560d980d662cce24af4c80.png]]

#+begin_src ipython
  num_bins = 200
  window = 0
  energy1 = run_energy(X[...], num_bins, window)
  energy2 = run_energy(X_heter[...], num_bins, window)
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots()
  SMOOTH = 1
  window = .1

  plot_energy(energy2,  ax=ax, window=window,
              SMOOTH=SMOOTH, color='b')
  
  plot_energy(energy1,  ax=ax, window=window,
              SMOOTH=SMOOTH, color='r')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/67bf9dc2e460a5a108c9b392f1987d2f0253eb11.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

*** random
#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  
  def figname(mouse):
      return mouse + "_behavior_tasks_correct" + ".svg"

  figlist = ['../figs/landscape' + figname(mouse) for mouse in mice]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "../figs/performance_all_mice.svg", dim=[4,3], fontsize=22)

#+end_src

#+RESULTS:
:RESULTS:
: ['../figs/landscapeChRM04_behavior_tasks_correct.svg', '../figs/landscapeJawsM15_behavior_tasks_correct.svg', '../figs/landscapeJawsM18_behavior_tasks_correct.svg', '../figs/landscapeACCM03_behavior_tasks_correct.svg', '../figs/landscapeACCM04_behavior_tasks_correct.svg']
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[150], line 13[0m
: [1;32m     11[0m height [38;5;241m=[39m width [38;5;241m*[39m golden_ratio [38;5;241m*[39m [38;5;241m1.4[39m
: [1;32m     12[0m figsize [38;5;241m=[39m [width, height]
: [0;32m---> 13[0m [43mmatplotlib[49m[38;5;241m.[39mrcParams[[38;5;124m'[39m[38;5;124mlines.markersize[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;241m5.5[39m
: [1;32m     15[0m create_grid(figlist, [38;5;124m"[39m[38;5;124m../figs/performance_all_mice.svg[39m[38;5;124m"[39m, dim[38;5;241m=[39m[[38;5;241m4[39m,[38;5;241m3[39m], fontsize[38;5;241m=[39m[38;5;241m22[39m)
: 
: [0;31mNameError[0m: name 'matplotlib' is not defined
:END:

#+begin_src ipython
  def find_extrema(values, window, bins):

    search_space = np.linspace(0, 360, values.shape[0], endpoint=False)

    values = values[(search_space>=bins[0]) & (search_space<=bins[1])]
    search_space = search_space[(search_space>=bins[0]) & (search_space<=bins[1])]
    
    min_index = np.argmin(values)
    max_index = np.argmax(values)

    # Find the global minimum and maximum values (well depth and barrier top height)
    well_depth = values[min_index]
    barrier_top_height = values[max_index]

    # Find the location of the well and barrier top
    well_location = search_space[min_index]
    barrier_top_location = search_space[max_index]
    print('well:','location', well_location, 'size', well_depth,
          'barrier_top', 'location', barrier_top_location, 'size', barrier_top_height)

    # search_space = np.linspace(0, 360, values.shape[0], endpoint=False)
    # min_idx = np.argwhere(search_space == well_location)
    # max_idx = np.argwhere(search_space == barrier_top_location)

    return min_index, max_index, well_depth, barrier_top_height
#+end_src

#+RESULTS:

#+begin_src ipython
  windowSize = int(window * energy_first.shape[0])
  values = circcvl(energy_last, windowSize) * 100
  min, max , depth , high = find_extrema(values, window, bins=[0, 90])
  min, max , depth , high = find_extrema(values, window, bins=[90, 180])
  min, max , depth , high = find_extrema(values, window, bins=[180, 270])
  min, max , depth , high = find_extrema(values, window, bins=[270, 360])  
#+end_src

#+RESULTS:
: well: location 8.0 size 0.17327824249577137 barrier_top location 88.0 size 0.27469014326503216
: well: location 180.0 size 0.08262227261666122 barrier_top location 104.0 size 0.2917498066774323
: well: location 188.0 size 0.07131802872762201 barrier_top location 256.0 size 0.3325591506835605
: well: location 356.0 size 0.1856840421862889 barrier_top location 276.0 size 0.3360528835608969

#+begin_src ipython
  E_copy = np.delete(values, min)
  min2, max2 , depth , high = find_extrema(E_copy, window, bins=[0, 200])  
#+end_src

#+RESULTS:
: well: location 188.0 size 0.0005612652365147334 barrier_top location 84.0 size 0.002771244370013652

#+begin_src ipython
  def find_local_extrema(energy, window, epsilon=1e-5):

      window = int(window * energy.shape[0])
      values = circcvl(energy, windowSize=window)
      min_index = np.argmin(values)
      max_index = np.argmax(values)

      search_space = np.linspace(0, 360, energy.shape[0], endpoint=False)
      # Evaluate the landscape over the search space

      # Prepare lists to hold the points of detected extrema
      minima = []
      maxima = []

      # Iterate over the evaluated points and look for sign changes
      for i in range(1, len(values) - 1):
          # Check for a local minimum
          if values[i] < values[i - 1] and values[i] < values[i + 1]:
              minima.append((search_space[i], values[i]))

          # Check for a local maximum
          if values[i] > values[i - 1] and values[i] > values[i + 1]:
              maxima.append((search_space[i], values[i]))

      # Filter extrema to remove very close points (within epsilon)
      minima = [(x, y) for i, (x, y) in enumerate(minima)
                if i == 0 or (i > 0 and abs(x - minima[i-1][0]) > epsilon)]
      maxima = [(x, y) for i, (x, y) in enumerate(maxima)
                if i == 0 or (i > 0 and abs(x - maxima[i-1][0]) > epsilon)]

      # Return the detected extrema
      return {
          'wells': minima,
          'barrier_tops': maxima
      }

#+end_src

#+RESULTS:

#+begin_src ipython
  find_local_extrema(energy_first, window)
#+end_src

#+RESULTS:
| wells | : | ((16.0 0.0015743827021504088) (64.0 0.002395353937104354) (88.0 0.0026713243917297074) (96.0 0.002701233453606301) (188.0 0.0005612652365147334) (272.0 0.003094561390032623) (336.0 0.0011888204077842568) (344.0 0.0012699695810135545)) | barrier_tops | : | ((12.0 0.0016178249836610833) (60.0 0.002417496788466346) (84.0 0.002771244370013652) (92.0 0.0027215515464872474) (104.0 0.0027423902055076104) (268.0 0.0031169150432897906) (280.0 0.003119171330146179) (340.0 0.0012875979045408605)) |

#+begin_src ipython
  def get_energy(X, num_bins, bins, IF_NORM=0, IF_CI=0):
      if IF_NORM:
          X = preprocess_X(X, scaler="robust", avg_noise=0, unit_var=0)

      X = X[..., bins[0]:bins[1]]

      ci_last = None
      energy = run_energy(X, num_bins, window=0)

      return energy
#+end_src

#+begin_src ipython
  def get_min_max(energy, window):
      smooth = circcvl(energy, windowSize=window)

      min = np.min(smooth)
      max = np.max(smooth)
#+end_src

#+RESULTS:

#+begin_src ipython
from scipy.signal import argrelextrema
from scipy.optimize import minimize_scalar

def find_landscape_features(landscape_function, x_start, x_end):
    # Create a grid of points between x_start and x_end
    x = np.linspace(x_start, x_end, num_points)
    # Evaluate the landscape function on this grid
    y = landscape_function(x)

    # Find indices of local maxima and minima
    maxima_indices = argrelextrema(y, np.greater)[0]
    minima_indices = argrelextrema(y, np.less)[0]
    
    # Use minimize_scalar to refine the location of the wells and barrier tops
    wells = []
    for index in minima_indices:
        result = minimize_scalar(lambda x: landscape_function(x), bracket=[x[index-1], x[index], x[index+1]])
        wells.append((result.x, result.fun))

    barrier_tops = []
    for index in maxima_indices:
        result = minimize_scalar(lambda x: -landscape_function(x), bracket=[x[index-1], x[index], x[index+1]])
        barrier_tops.append((result.x, -result.fun))

    return wells, barrier_tops

#+end_src

#+begin_src ipython
  for i_day in days:
    
#+end_src
