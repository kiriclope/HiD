#+TITLE: Performance in the Dual Task
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: <Figure size 500x309.017 with 0 Axes>
:END:

* Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '../')
  from dual_data.performance.perf_tasks import run_perf_tasks
  from dual_data.common.fig_grid import create_grid
#+end_src

#+RESULTS:

* Performance
** Parameters
#+begin_src ipython
  mouse = 'ACCM03'
  perf_type = 'correct'
  tasks = ["DPA", 'DualGo', 'DualNoGo']
#+end_src

#+RESULTS:

** Single Mouse
#+begin_src ipython 
  perf_A = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='A', tasks=tasks)
  perf_B = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='B', tasks=tasks)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: DualNoGo 960 (960, 6) (160, 6)
[[file:./.ob-jupyter/4dbc8e3defe14a4dcee16c20a7de93945170b03a.png]]
:END:
:RESULTS:

#+begin_src ipython
  # print(perf_A.shape)
  # print(perf_B.shape)
  # print(np.stack((perf_A, perf_B)).shape)
  Delta_perf = perf_A - perf_B

  plt.plot(np.mean(Delta_perf,0))
  plt.show()
#+end_src


#+begin_example
  loading files from /home/leon/dual_task/dual_data/data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 960 (960, 6) (160, 6)
  DualGo 960 (960, 6) (160, 6)
  DualNoGo 960 (960, 6) (160, 6)
  loading files from /home/leon/dual_task/dual_data/data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 960 (960, 6) (160, 6)
  DualGo 960 (960, 6) (160, 6)
#+end_example


#+begin_src ipython
  # print(perf_A.shape)
  # print(perf_B.shape)
  # print(np.stack((perf_A, perf_B)).shape)
  Delta_perf = perf_A - perf_B

  plt.plot(np.mean(Delta_perf,0))
  plt.show()
#+end_src


** All Mice
#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  mice = ['AP02', 'AP12', 'PP09']
  # mice = ['PP09','PP17', 'RP13']
  # mice = ['ChRM04','JawsM15', 'JawsM18']

  perfs = []

  for mouse in mice:
      perf_A = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='A', tasks=tasks)
      plt.close('all')
      perf_B = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='B', tasks=tasks)
      plt.close('all')

      perf = np.stack((perf_A, perf_B))
      perfs.append(perf)

  perfs = np.array(perfs)
#+end_src

#+RESULTS:
: e6e2ac00-eb7f-49f3-870c-318836dd7971

#+begin_src ipython
  perfs = np.array(perfs)
  print(perfs.shape)
  Delta_perf = np.abs(perfs[:, 0] - perfs[:, 1])
  plt.plot(np.mean(np.mean(Delta_perf, 0), -1))
#+end_src

#+RESULTS:

* Summary
#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04', 'AP02', 'AP12', 'PP09','PP17', 'RP13']
  
  def figname(mouse):
      return mouse + "_behavior_tasks_correct" + ".svg"

  figlist = ['../figs/' + figname(mouse) for mouse in mice]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "../figs/performance_all_mice.svg", dim=[4,3], fontsize=22)

#+end_src

#+RESULTS:
: ['../figs/ChRM04_behavior_tasks_correct.svg', '../figs/JawsM15_behavior_tasks_correct.svg', '../figs/JawsM18_behavior_tasks_correct.svg', '../figs/ACCM03_behavior_tasks_correct.svg', '../figs/ACCM04_behavior_tasks_correct.svg', '../figs/AP02_behavior_tasks_correct.svg', '../figs/AP12_behavior_tasks_correct.svg', '../figs/PP09_behavior_tasks_correct.svg', '../figs/PP17_behavior_tasks_correct.svg', '../figs/RP13_behavior_tasks_correct.svg']
: 504.0 311.48913
: ['2016pt', '934pt']

#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:../figs/performance_all_mice.svg]]
