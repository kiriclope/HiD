#+TITLE: Performance in the Dual Task
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session performance :kernel dual_data

* Notebook Settings
#+begin_src ipython
    %load_ext autoreload
    %autoreload 2
    %reload_ext autoreload

    %run /home/leon/dual_task/dual_data/notebooks/setup.py
    %matplotlib inline
    %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')
  from src.performance.perf_tasks import run_perf_tasks
  from src.common.fig_grid import create_grid
  from src.common.options import set_options
#+end_src

#+RESULTS:

* Performance
** Parameters

#+begin_src ipython
  mouse = 'ACCM03'
  perf_type = 'correct'
  tasks = ["DPA", 'DualGo', 'DualNoGo']
  options = set_options()
#+end_src

#+RESULTS:

** Single Mouse

#+begin_src ipython
  tasks = ['DPA', "DualGo", 'DualNoGo']
  run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='AB', tasks=tasks, pal=options['pal'])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: Loading files from /home/leon/dual_task/dual_data/data/ACCM03
: PREPROCESSING: SCALER robust AVG MEAN False AVG NOISE True UNIT VAR False
: DPA 960 (960, 6) (320, 6)
: DualGo 960 (960, 6) (320, 6)
: DualNoGo 960 (960, 6) (320, 6)
[[file:./.ob-jupyter/af63465f21a8d09e1eea73f27fb29bbe5d7e3ce0.png]]
:END:

#+begin_src ipython
  options = set_options()
  tasks = ["DualGo"]
  perf_A = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='A', tasks=tasks, pal=options['pal'])
  options['pal'][1] = options['pal'][0]
  perf_B = run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='B', tasks=tasks, pal=options['pal'])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  loading files from /home/leon/dual_task/src.data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN False AVG NOISE True UNIT VAR False
  ##########################################
  0.5
  DualGo 960 (960, 6) (80, 6)
  loading files from /home/leon/dual_task/src.data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN False AVG NOISE True UNIT VAR False
  ##########################################
  0.5
  DualGo 960 (960, 6) (80, 6)
#+end_example
[[file:./.ob-jupyter/040d5a43551181ded98de798540edefbf31ebc2e.png]]
:END:
:RESULTS:

#+begin_src ipython
  # print(perf_A.shape)
  # print(perf_B.shape)
  # print(np.stack((perf_A, perf_B)).shape)
  Delta_perf = perf_A - perf_B

  plt.plot(np.mean(Delta_perf,0))
  plt.show()
#+end_src


#+begin_example
  loading files from /home/leon/dual_task/src.data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 960 (960, 6) (160, 6)
  DualGo 960 (960, 6) (160, 6)
  DualNoGo 960 (960, 6) (160, 6)
  loading files from /home/leon/dual_task/src.data/ACCM03
  X_days (960, 361, 84) y_days (960, 6)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 960 (960, 6) (160, 6)
  DualGo 960 (960, 6) (160, 6)
#+end_example


#+begin_src ipython
  # print(perf_A.shape)
  # print(perf_B.shape)
  # print(np.stack((perf_A, perf_B)).shape)
  Delta_perf = perf_A - perf_B

  plt.plot(np.mean(Delta_perf,0))
  plt.show()
#+end_src

** All Mice

#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  # mice = ['AP02', 'AP12', 'PP09']
  # mice = ['PP09','PP17', 'RP13']
  # mice = ['ChRM04','JawsM15', 'JawsM18']

  perf_type = 'correct'

  perfs = []

  for mouse in mice:
      perf = np.array(run_perf_tasks(mouse=mouse, perf_type=perf_type, sample='all', tasks=tasks, pal=options['pal']))
      plt.close('all')

      if perf.shape[-1] !=6:
          perf = np.append(perf, np.nan * np.zeros((3, 1)), axis=-1)

      print(perf.shape)
      perfs.append(perf)

  perfs = np.array(perfs)
  print(perfs.shape)
#+end_src

#+RESULTS:
#+begin_example
  DPA 1152 (1152, 6) (192, 6)
  DualGo 1152 (1152, 6) (192, 6)
  DualNoGo 1152 (1152, 6) (192, 6)
  (3, 6)
  DPA 1152 (1152, 6) (192, 6)
  DualGo 1152 (1152, 6) (192, 6)
  DualNoGo 1152 (1152, 6) (192, 6)
  (3, 6)
  DPA 1152 (1152, 6) (192, 6)
  DualGo 1152 (1152, 6) (192, 6)
  DualNoGo 1152 (1152, 6) (192, 6)
  (3, 6)
  DPA 960 (960, 6) (320, 6)
  DualGo 960 (960, 6) (320, 6)
  DualNoGo 960 (960, 6) (320, 6)
  (3, 6)
  DPA 960 (960, 6) (320, 6)
  DualGo 960 (960, 6) (320, 6)
  DualNoGo 960 (960, 6) (320, 6)
  (3, 6)
  (5, 3, 6)
#+end_example

#+begin_src ipython
    from scipy import stats

    mean_perf = np.nanmean(perfs, 0)
    sem = stats.sem(perfs, axis=0)
    # Number of comparisons
    num_tests = perfs.shape[1]  # This is the number of confidence intervals you are calculating

    # Family-wise Confidence Level (for all tests)
    family_confidence_level = 0.95

    # Per-comparison Confidence Level for Bonferroni correction
    bonferroni_confidence_level = 1 - (1 - family_confidence_level) / num_tests

    # Calculate the t-statistic for the Bonferroni-adjusted confidence level
    t_stat = stats.t.ppf((1 + bonferroni_confidence_level) / 2., perfs.shape[0] - 1)

    # Calculate the Bonferroni-corrected CI for each time point
    ci_bound = sem * t_stat
    print(mean_perf.shape, ci_bound.shape)
#+end_src

#+RESULTS:
: (3, 6) (3, 6)

#+begin_src ipython
  from src.common.options import set_options
  opts = set_options()
#+end_src

#+RESULTS:


*** perf

#+begin_src ipython
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = np.arange(1, 7)
  fig, ax = plt.subplots()

  for i in range(3):
      plt.plot(days, mean_perf[i], '-o', color=opts['pal'][i], label=tasks[i])
      plt.fill_between(days,
                       mean_perf[i] - ci_bound[i]/5,
                       mean_perf[i] + ci_bound[i]/5,
                       alpha=0.1, color=opts['pal'][i])

  plt.xlabel('Day')

  plt.ylabel('Performance')
  plt.ylim([0.5, 1])
  plt.yticks([.5, .75, 1])

  plt.xticks([1, 2, 3, 4, 5, 6])
  legend = ax.legend(loc='lower right', fontsize=14, frameon=0)
  bbox = legend.get_window_extent().transformed(ax.transAxes.inverted())
  text_y_coord = bbox.y1 + 0.1  # Add a small offset above the legend
  plt.plot([1, 6], [.5, .5], '--k')
  # Add text above the legend
  ax.text(1.0, text_y_coord, 'n=5     ',
          verticalalignment='bottom',
          horizontalalignment='right',
          transform=ax.transAxes)

  plt.savefig('../figs/perf/performance_all_mice.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/89a4e83f268dad79ab8cdb336f39c8ca01fd203f.png]]
:END:


*** hits
#+begin_src ipython
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = np.arange(1, 7)
  fig, ax = plt.subplots()

  for i in range(3):
      plt.plot(days, mean_perf[i], '-o', color=opts['pal'][i], label=tasks[i])
      plt.fill_between(days,
                       mean_perf[i] - ci_bound[i]/5,
                       mean_perf[i] + ci_bound[i]/5,
                       alpha=0.1, color=opts['pal'][i])

  plt.xlabel('Day')

  plt.ylabel('Hits')
  plt.ylim([0.5, 1])
  plt.yticks([.5, .75, 1])

  plt.xticks([1, 2, 3, 4, 5, 6])
  legend = ax.legend(loc='lower right', fontsize=14, frameon=0)
  bbox = legend.get_window_extent().transformed(ax.transAxes.inverted())
  text_y_coord = bbox.y1 + 0.1  # Add a small offset above the legend
  plt.plot([1, 6], [.5, .5], '--k')
  # Add text above the legend
  ax.text(1.0, text_y_coord, 'n=5     ',
          verticalalignment='bottom',
          horizontalalignment='right',
          transform=ax.transAxes)

  plt.savefig('../figs/perf/hits_all_mice.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/98ddbb4ffcd0e616d36760834b7a9783e1154d64.png]]


*** fa

#+begin_src ipython
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = np.arange(1, 7)
  fig, ax = plt.subplots()

  for i in range(3):
      plt.plot(days, mean_perf[i], '-o', color=opts['pal'][i], label=tasks[i])
      plt.fill_between(days,
                       mean_perf[i] - ci_bound[i]/5,
                       mean_perf[i] + ci_bound[i]/5,
                       alpha=0.1, color=opts['pal'][i])

  plt.xlabel('Day')

  if 'fa' in perf_type:
      plt.ylabel('False Alarms')
      plt.ylim([0., 1])
      plt.yticks([0, .25, .5, .75, 1])

  plt.xticks([1, 2, 3, 4, 5, 6])
  legend = ax.legend(loc='upper right', fontsize=14, frameon=0)
  bbox = legend.get_window_extent().transformed(ax.transAxes.inverted())
  text_y_coord = bbox.y1 + 0.1  # Add a small offset above the legend
  plt.plot([1, 6], [.5, .5], '--k')
  # Add text above the legend
  ax.text(1.0, text_y_coord, 'n=5     ',
          verticalalignment='bottom',
          horizontalalignment='right',
          transform=ax.transAxes)

  if 'fa' in perf_type:
      plt.savefig('../figs/perf/fa_all_mice.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/787a9e749f7a13f92b5debe46f50ddbe719d8363.png]]


** GLM
#+begin_src ipython
  import statsmodels.api as sm
  import statsmodels.formula.api as smf
  import pandas as pd
#+end_src

#+RESULTS:

#+begin_src ipython

# Initialize an empty list to store rows
data = []

# Iterate over the 3D numpy array and collect data
for i in range(perfs.shape[0]):
    for j in range(perfs.shape[1]):
        for k in range(perfs.shape[2]):
            # Append a dictionary for each row
            data.append({
                'mouse': i,
                'task': j,
                'day': k,
                'perf': perfs[i, j, k]
            })

# Convert list of dictionaries into a DataFrame
df = pd.DataFrame(data)

print(df.shape)
#+end_src

#+RESULTS:
: (90, 4)

#+begin_src ipython
    formula = 'perf ~ task * day'
    glm_gauss = smf.glm(formula=formula, data=df, family=sm.families.Gaussian())
    result = glm_gauss.fit()
    print(result.summary())
#+end_src

#+RESULTS:
#+begin_example
                   Generalized Linear Model Regression Results
  ==============================================================================
  Dep. Variable:                   perf   No. Observations:                   84
  Model:                            GLM   Df Residuals:                       80
  Model Family:                Gaussian   Df Model:                            3
  Link Function:               Identity   Scale:                        0.015267
  Method:                          IRLS   Log-Likelihood:                 58.505
  Date:                Thu, 25 Jul 2024   Deviance:                       1.2214
  Time:                        17:16:35   Pearson chi2:                     1.22
  No. Iterations:                     3   Pseudo R-squ. (CS):             0.5338
  Covariance Type:            nonrobust
  ==============================================================================
                   coef    std err          z      P>|z|      [0.025      0.975]
  ------------------------------------------------------------------------------
  Intercept      0.6402      0.037     17.236      0.000       0.567       0.713
  task          -0.0021      0.029     -0.071      0.943      -0.058       0.054
  day            0.0687      0.013      5.246      0.000       0.043       0.094
  task:day      -0.0026      0.010     -0.256      0.798      -0.022       0.017
  ==============================================================================
#+end_example

#+begin_src ipython
  print(glm_gauss.summary())
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: AttributeError                            Traceback (most recent call last)
: Cell In[30], line 1
: ----> 1 print(glm_gauss.summary())
:
: AttributeError: 'GLM' object has no attribute 'summary'
:END:

* Summary

#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04', 'AP02', 'AP12', 'PP09','PP17', 'RP13']

  def figname(mouse):
      return mouse + "_behavior_tasks_correct" + ".svg"

  figlist = ['../figs/' + figname(mouse) for mouse in mice]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "../figs/performance_all_mice.svg", dim=[4,3], fontsize=22)

#+end_src

#+RESULTS:
: ['../figs/ChRM04_behavior_tasks_correct.svg', '../figs/JawsM15_behavior_tasks_correct.svg', '../figs/JawsM18_behavior_tasks_correct.svg', '../figs/ACCM03_behavior_tasks_correct.svg', '../figs/ACCM04_behavior_tasks_correct.svg', '../figs/AP02_behavior_tasks_correct.svg', '../figs/AP12_behavior_tasks_correct.svg', '../figs/PP09_behavior_tasks_correct.svg', '../figs/PP17_behavior_tasks_correct.svg', '../figs/RP13_behavior_tasks_correct.svg']
: 504.0 311.48913
: ['2016pt', '934pt']

#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:../figs/performance_all_mice.svg]]
