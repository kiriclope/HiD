#+TITLE: Performance in the Dual Task
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: <Figure size 500x309.017 with 0 Axes>
:END:

* Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '../')
  from dual_data.performance.perf_tasks import run_perf_tasks
  from dual_data.common.fig_grid import create_grid
#+end_src

#+RESULTS:

#+begin_src ipython
  from dual_data.common.options import set_options
  from dual_data.common.get_data import get_fluo_data
  from scipy.io import loadmat
  
  options = set_options(mouse='PP09')
  data = loadmat('../data/PP09/SamedROI_10Days/Day01/DFF_Data01.mat')
#+end_src

#+RESULTS:

#+begin_src ipython
print(data.keys())
#+end_src

#+RESULTS:
: dict_keys(['__header__', '__version__', '__globals__', 'ROIPath', 'laserTag', 'mouseName', 'dffPath', 'AllFileEvents', 'frameRate', 'task', 'basDuration', 'sampleDuration', 'testDuration', 'delayDuration', 'rewardDuration', 'basFrame', 'sampleFrame', 'testFrame', 'delayFrame', 'rewardFrame', 'frameNum', 'basBin', 'sampleBin', 'delayBin', 'testBin', 'rewardBin', 'binNum', 'binFrame', 'trialPerBlock', 'periodFrame', 'delayPeriodFrame', 'periodBin', 'delayPeriodBin', 'trialNum', 'neuronNum', 'blockPerDay', 'trialPerDay', 'dffEvent', 'traceRaw', 'Cdf_Trial', 'dff_TrialBase', 'FR_Trial', 'Cdec_Trial', 'laserOnTrial', 'laserOffTrial', 'hitTrial', 'missTrial', 'FATrial', 'CRTrial', 'S1Trial', 'S2Trial', 'S3Trial', 'S4Trial', 'D1Trial', 'D2Trial', 'NDTrial', 'distTrial', 'dff_BinTrial'])

#+begin_src ipython
#+end_src

#+RESULTS:

* Performance
** Single Mouse
#+begin_src ipython :
  run_perf_tasks(mouse='JawsM18', perf_type='correct_rej', reload=0)
#+end_src

#+RESULTS:
:RESULTS:
: loading files from /home/leon/dual_task/dual_data/data/JawsM18
: X_days (1152, 444, 84) y_days (1152, 6)
: ##########################################
: PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
: ##########################################
: DPA 1152 (1152, 6) (96, 6)
: DualGo 1152 (1152, 6) (96, 6)
: DualNoGo 1152 (1152, 6) (96, 6)
[[file:./.ob-jupyter/685a106e5dfb433b48773025b0f41c66fe8eed9d.png]]
:END:

** All Mice
#+begin_src ipython
  # mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04', 'AP02', 'AP12']
  mice = ['PP09','PP17', 'RP13']
  # mice = ['ChRM04','JawsM15', 'JawsM18']
  for mouse in mice:
        run_perf_tasks(mouse=mouse, perf_type='correct', reload=0)
        plt.close('all')       
#+end_src

#+RESULTS:
#+begin_example
  loading files from /home/leon/dual_task/dual_data/data/PP09
  X_days (1848, 894, 84) y_days (1848, 7)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 1848 (1848, 7) (252, 7)
  DualGo 1848 (1848, 7) (336, 7)
  DualNoGo 1848 (1848, 7) (336, 7)
  loading files from /home/leon/dual_task/dual_data/data/PP17
  X_days (1496, 478, 84) y_days (1496, 7)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 1496 (1496, 7) (216, 7)
  DualGo 1496 (1496, 7) (288, 7)
  DualNoGo 1496 (1496, 7) (288, 7)
  loading files from /home/leon/dual_task/dual_data/data/RP13
  X_days (1920, 437, 84) y_days (1920, 7)
  ##########################################
  PREPROCESSING: SCALER robust AVG MEAN 0 AVG NOISE True UNIT VAR False
  ##########################################
  DPA 1920 (1920, 7) (320, 7)
  DualGo 1920 (1920, 7) (320, 7)
  DualNoGo 1920 (1920, 7) (320, 7)
#+end_example
* Summary
#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04', 'AP02', 'AP12', 'PP09','PP17', 'RP13']
  
  def figname(mouse):
      return mouse + "_behavior_tasks_correct" + ".svg"

  figlist = ['../figs/' + figname(mouse) for mouse in mice]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "../figs/performance_all_mice.svg", dim=[4,3], fontsize=22)

#+end_src

#+RESULTS:
: ['../figs/ChRM04_behavior_tasks_correct.svg', '../figs/JawsM15_behavior_tasks_correct.svg', '../figs/JawsM18_behavior_tasks_correct.svg', '../figs/ACCM03_behavior_tasks_correct.svg', '../figs/ACCM04_behavior_tasks_correct.svg', '../figs/AP02_behavior_tasks_correct.svg', '../figs/AP12_behavior_tasks_correct.svg', '../figs/PP09_behavior_tasks_correct.svg', '../figs/PP17_behavior_tasks_correct.svg', '../figs/RP13_behavior_tasks_correct.svg']
: 504.0 311.48913
: ['2016pt', '934pt']

#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:../figs/performance_all_mice.svg]]
