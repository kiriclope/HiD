#+TITLE: Data driven RNN
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session my_session :kernel torch

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

* Torch model
** RNN
*** Model
#+begin_src ipython
  # Define the RNN model
  class MultivariateRNN(nn.Module):
      def __init__(self, input_size, hidden_size, num_layers, output_size, device):
          super(MultivariateRNN, self).__init__()
          self.hidden_size = hidden_size
          self.num_layers = num_layers
          self.device=device
          # You can swap nn.RNN with nn.LSTM or nn.GRU depending on your requirements
          self.rnn = nn.RNN(input_size, hidden_size, num_layers,
                            batch_first=True, nonlinearity='tanh', device=self.device)
          self.fc = nn.Linear(hidden_size, output_size, device=self.device)

      def forward(self, x):
          # Initial hidden state (can also initialize this outside and pass it as a parameter)
          # h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size, device=self.device)
          h0 = torch.randn(self.num_layers, x.size(0), self.hidden_size, device=self.device) * 0.01
          
          # Forward propagate the RNN
          out, _ = self.rnn(x, h0)

          # Pass the output through a fully connected layer
          out = self.fc(out)

          # Pass the output of the last time step through a fully connected layer
          # out = self.fc(out[:, -1, :])

          return out
#+end_src

#+RESULTS:

*** Sliding Window

#+begin_src ipython
  class SlidingWindowDataset(Dataset):
      def __init__(self, data, sequence_length=100, stride=1):
          self.data = data
          self.sequence_length = sequence_length
          self.stride = stride
          # Calculate number of samples once to optimize __len__
          self.num_sessions, self.num_time_points, _ = self.data.size()
          self.num_samples_per_session = (self.num_time_points - self.sequence_length) // self.stride
          self.total_samples = self.num_samples_per_session * self.num_sessions

      def __len__(self):
          return self.total_samples

      def __getitem__(self, idx):
          # Determine which session this idx belongs to
          session_idx = idx // self.num_samples_per_session
          # Determine the start of the slice for this idx
          session_start = idx % self.num_samples_per_session
          time_idx = session_start * self.stride

          # Extract sequences using calculated indices
          input_sequence = self.data[session_idx, time_idx:time_idx + self.sequence_length]
          target_sequence = self.data[session_idx, time_idx + self.sequence_length]

          return input_sequence, target_sequence
#+end_src

#+RESULTS:

*** Data Split

#+begin_src ipython
  def split_data(X, train_perc=0.8, batch_size=32):

    # Split the dataset into training and validation sets
    train_size = int(train_perc * len(X))

    X_train = X[:train_size]
    X_test = X[train_size:]

    # X_train_scaled, X_mean, X_std = standard_scaler(X_train, IF_RETURN=1)
    # X_test_scaled = (X_test - X_mean) / X_std

    Y_train = Y[:train_size]
    Y_test = Y[train_size:]

    # Y_train_scaled, Y_mean, Y_std = standard_scaler(Y_train, IF_RETURN=1)
    # Y_test_scaled = (Y_test - Y_mean) / Y_std

    # Create data sets
    # train_dataset = TensorDataset(X_train_scaled, Y_train_scaled)
    # val_dataset = TensorDataset(X_test_scaled, Y_test_scaled)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)
    
    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    # sequence_length = 14  # or any other sequence length you want
    # stride = 1  # or any other stride you want

    # sliding_window_dataset = SlidingWindowDataset(X, sequence_length, stride)
    # train_loader = torch.utils.data.DataLoader(sliding_window_dataset, batch_size=5, shuffle=True)
    # val_loader = torch.utils.data.DataLoader(sliding_window_dataset, batch_size=5, shuffle=True)

    return train_loader, val_loader
#+end_src

#+RESULTS:

*** Optim

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer):
      size = len(dataloader.dataset)
      model.train()
      for batch, (X, y) in enumerate(dataloader):
          
          # Compute prediction error
          pred = model(X)
          loss = loss_fn(pred, y)

          # Backpropagation
          loss.backward()
          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)
      
      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
          val_loss /= size

      return val_loss
      # model.eval()
      # test_loss, correct = 0, 0
      # with torch.no_grad():
      #     for X, y in dataloader:
      #         X, y = X.to(device), y.to(device)
      #         pred = model(X)
      #         test_loss += loss_fn(pred, y).item()
      #         correct += (pred.argmax(1) == y).type(torch.float).sum().item()
      # test_loss /= num_batches
      # correct /= size
      # print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")
#+end_src

#+RESULTS:


#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100):

    # scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
    # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

    # Training loop.
    for epoch in range(num_epochs):
        loss = train(train_loader, model, loss_fn, optimizer)
        val_loss = test(val_loader, model, loss_fn)
        scheduler.step(val_loss)

        if epoch % int(0.1 * num_epochs) == 0:
            print(f'Epoch {epoch}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')

#+end_src

#+RESULTS:

#+begin_src ipython
(1 % (.1 * num_epochs))
#+end_src

#+RESULTS:
: 1.0

*** Prediction

#+begin_src ipython
  def get_predictions(model, future_steps, device='cuda:1'):
      model.eval()  # Set the model to evaluation mode

      # Start with an initial seed sequence 
      input_size = model.rnn.input_size
      hidden_size = model.rnn.hidden_size

      seed_sequence = torch.randn(1, future_steps, input_size).to(device)  # Replace with your actual seed

      # Collect predictions
      predictions = []
      
      # Initialize the hidden state (optional, depends on your model architecture)
      # hidden = torch.zeros(model.rnn.num_layers, 1, hidden_size).to(device)
      hidden = torch.randn(model.rnn.num_layers, 1, hidden_size, device=device) * 0.01

      # Generate time series
      for _ in range(future_steps):
          # Forward pass
          with torch.no_grad():  # No need to track gradients
              out, hidden = model.rnn(seed_sequence, hidden)
              next_step = model.fc(out[:, -1, :])  # Output for the last time step

          predictions.append(next_step.cpu().numpy())

          # Use the predicted next step as the input for the next iteration
          next_step = next_step.unsqueeze(1)  # Add the sequence length dimension
          seed_sequence = torch.cat((seed_sequence[:, 1:, :], next_step), 1)  # Move the window

      # # Convert predictions to a numpy array for further analysis
      predicted_time_series = np.concatenate(predictions, axis=0)

      return predicted_time_series

#+end_src

#+RESULTS:

** Pipeline
#+begin_src ipython
  def standard_scaler(data, IF_RETURN=0):
      mean = data.mean(dim=0, keepdim=True)
      std = data.std(dim=0, keepdim=True)
      if IF_RETURN:
          return (data - mean) / std, mean, std
      else:
          return (data - mean) / std

#+end_src

#+RESULTS:

#+begin_src ipython

  from torch.utils.data import DataLoader
  from torchvision import transforms

  # Assuming 'MyDataset' is a Dataset object you've made for your data
  class MyPipeline:
      def __init__(self, model, preprocessing=None):
          self.model = model
          self.preprocessing = preprocessing

      def __call__(self, x):
          if self.preprocessing:
              x = self.preprocessing(x)
          return self.model(x)

  # Define the transformations (preprocessing)
  preprocessing = transforms.Compose([
      transforms.ToTensor(),
      standard_scaler()
  ])
  
  # Create the pipeline
  model = MyRNNModel()  # Replace with your actual model
  pipeline = MyPipeline(model, preprocessing)

  # Now you can use your pipeline to process and feed data into your model
  dataset = MyDataset()
  dataloader = DataLoader(dataset, batch_size=32, shuffle=True)

  # Use the pipeline in your training loop
  for inputs, targets in dataloader:
      predictions = pipeline(inputs)
      loss = loss_func(predictions, targets)
      # ... rest of your training loop
#+end_src

** Synthetic Data


#+begin_src ipython
  def generate_multivariate_time_series(num_series, num_steps, num_features, device='cuda'):
      np.random.seed(42)  # For reproducibility

      # Generate random frequencies and phases for the sine waves
      frequencies = np.random.uniform(low=0.1, high=2.0, size=(num_features))
      phases = np.random.uniform(low=0, high=2*np.pi, size=(num_features))
      noise = np.random.uniform(low=0, high=1, size=(num_series))

      # Generate time steps for the sine waves
      time_steps = np.linspace(0, num_steps, num_steps)

      # Initialize the data array
      data = np.zeros((num_series, num_steps, num_features))

      # Populate the data array with sine waves
      for i in range(num_series):
          for j in range(num_steps):
              for k in range(num_features):
                  data[i, j, k] = np.sin(2 * np.pi * j / num_steps - phases[k]) + np.random.uniform()

      # Return as torch.FloatTensor
      return torch.FloatTensor(data).to(device)

#+end_src

#+RESULTS:

** Test on synthetic data
*** Create synthetic data

#+begin_src ipython
  num_series = 32  # Number of time series samples to generate
  num_steps = 84  # Number of time steps in each time series
  num_features = 100  # Number of features (signals) in each time series
  
  # Generate synthetic data
  synthetic_data = generate_multivariate_time_series(num_series, num_steps, num_features)

  # Split the data into inputs (X) and targets (Y), e.g., use previous timesteps to predict the next timestep
  X = synthetic_data[:, :-1, :]  # Using all but the last timestep as input
  Y = synthetic_data[:, 1:, :]   # Using all but the first timestep as target (shifted by one)

  print("Input shape:", X.shape)
  print("Target shape:", Y.shape)

#+end_src

#+RESULTS:
: Input shape: torch.Size([32, 83, 100])
: Target shape: torch.Size([32, 83, 100])

#+begin_src ipython
  plt.plot(np.arange(0, num_steps, 180), np.sin(num_steps))
  plt.plot(X.cpu().numpy()[0,:,2], alpha=1)
  plt.plot(X.cpu().numpy()[3,:,0], alpha=1, color='r')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/78838b620d7e8cf59ea8673395d08f97039b5f2c.png]]

*** Train model

#+begin_src ipython

  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  hidden_size = 1000
  num_layers = 1
  model = MultivariateRNN(input_size=num_features, hidden_size=hidden_size,
                          num_layers=num_layers, output_size=num_features, device=device)
  
  batch_size = 8
  train_loader, val_loader = split_data(X, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.001
  criterion = nn.MSELoss()
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate, weight_decay=0.01)

  num_epochs = 1000
  run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)  
#+end_src

#+RESULTS:
#+begin_example
  Epoch 0/1000, Training Loss: 0.2366, Validation Loss: 0.3841
  Epoch 00036: reducing learning rate of group 0 to 1.0000e-04.
  Epoch 00057: reducing learning rate of group 0 to 1.0000e-05.
  Epoch 00074: reducing learning rate of group 0 to 1.0000e-06.
  Epoch 00085: reducing learning rate of group 0 to 1.0000e-07.
  Epoch 00096: reducing learning rate of group 0 to 1.0000e-08.
  Epoch 100/1000, Training Loss: 0.0817, Validation Loss: 0.0854
  Epoch 200/1000, Training Loss: 0.0816, Validation Loss: 0.0854
  Epoch 300/1000, Training Loss: 0.0814, Validation Loss: 0.0853
  Epoch 400/1000, Training Loss: 0.0825, Validation Loss: 0.0853
  Epoch 500/1000, Training Loss: 0.0825, Validation Loss: 0.0853
  Epoch 600/1000, Training Loss: 0.0812, Validation Loss: 0.0853
  Epoch 700/1000, Training Loss: 0.0801, Validation Loss: 0.0853
  Epoch 800/1000, Training Loss: 0.0826, Validation Loss: 0.0853
  Epoch 900/1000, Training Loss: 0.0811, Validation Loss: 0.0853
#+end_example

#+RESULTS:

*** See data

#+begin_src ipython
  predicted_time_series = get_predictions(model, future_steps=84, device=device)
#+end_src

#+RESULTS:

#+begin_src ipython
  import numpy as np
  import matplotlib.pyplot as plt

  # Assuming 'predicted_time_series' is a numpy array containing your generated data
  # Each column in 'predicted_time_series' corresponds to a different feature in the time series

  # Plot each feature of the time series
  num_features = predicted_time_series.shape[1]
  plt.figure()
  for i in range(2):
      plt.plot(predicted_time_series[:, i], lw=5)
      plt.plot(X.cpu().numpy()[0, :, i], alpha=.2)

  plt.xlabel('Time')
  plt.ylabel('Feature Value')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/675b7f0ad695ec6afa7131611181e70ad4cce445.png]]

* Data
** imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')
  
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.common.options import set_options
#+end_src

#+RESULTS:

** parameters

#+begin_src ipython
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  kwargs = {'prescreen': 'fpr', 'pval': 0.05, 'trials': '', 'balance': 'under',
            'method': 'bootstrap', 'bolasso_pval':0.05, 'bolasso_penalty': 'l2',
            'bootstrap': True, 'n_boots': 1000,
            'preprocess': True, 'scaler_BL': None, 'avg_noise':True, 'unit_var_BL':False,
            'clf':'log_loss', 'scaler': None, 'tol':0.001, 'penalty':'l2',
            'out_fold': 'stratified', 'n_out': 5,
            'in_fold': 'stratified', 'n_in': 5,
            'random_state': None, 'n_repeats': 10,
            'n_lambda': 20, 'T_WINDOW': 0.5,
            }
  
#+end_src

#+RESULTS:

** load

#+begin_src ipython
  options = set_options(**kwargs)
  options['reload'] = False
  options['data_type'] = 'raw'
  options['DCVL'] = 1
  X_days, y_days = get_X_y_days(**options)
  X_data, y_data = get_X_y_S1_S2(X_days, y_days, **options)
#+end_src

#+RESULTS:
#+begin_example
  loading files from /home/leon/dual_task/src.data/JawsM15
  X_days (1152, 693, 84) y_days (1152, 6)
  ##########################################
  PREPROCESSING: SCALER None AVG MEAN False AVG NOISE True UNIT VAR False
  ##########################################
  Deconvolve Fluo
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/scipy/signal/_spectral_py.py:2017: UserWarning: nperseg = 256 is greater than input length  = 84, using nperseg = 84
    warnings.warn('nperseg = {0:d} is greater than input length '
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/oasis/functions.py:166: RuntimeWarning: invalid value encountered in multiply
    return constrained_oasisAR1(y, g[0], sn, optimize_b=True if b is None else False,
  ##########################################
  DATA: FEATURES sample TASK DualGo TRIALS  DAYS first LASER 0
  ##########################################
  multiple days 0 3 0
  X_S1 (48, 693, 84) X_S2 (48, 693, 84)
#+end_example


#+begin_src ipython
  import numpy as np
  from scipy.ndimage import convolve1d
  
  def moving_average_multidim(data, window_size, axis=-1):
      """
      Apply a 1D moving average across a specified axis of a multi-dimensional array.

      :param data: multi-dimensional array of data
      :param window_size: size of the moving window 
      :param axis: axis along which to apply the moving average
      :return: smoothed data with the same shape as input data
      """
      # Create a moving average filter window
      window = np.ones(window_size) / window_size
      # Apply 1D convolution along the specified axis
      smoothed_data = convolve1d(data, weights=window, axis=axis, mode='reflect')
      return smoothed_data

#+end_src

#+RESULTS:

#+begin_src ipython
  from src.decode.bump import circcvl
  # smoothed_data = circcvl(X_data, windowSize=2, axis=-1)
  print(X_data.shape)
  window_size = 6
  # from scipy.ndimage import gaussian_filter1d
  # smoothed_data = gaussian_filter1d(X_data, axis=-1, sigma=2)
  smoothed_data = moving_average_multidim(X_data[..., :52], window_size, axis=-1)
#+end_src

#+RESULTS:
: (96, 693, 84)

#+begin_src ipython
  for i in range(30):
      plt.plot(smoothed_data[0, i,:])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ed5f136cd3684651470e9a84eba9bcf85b1342e4.png]]

* Training

#+begin_src ipython
  # y = np.roll(X_data, -1)
  # y = y[..., :-1]

  Y = smoothed_data[..., 1:]
  X = smoothed_data[..., :-1]
  
  X = np.swapaxes(X, 1, -1)
  Y = np.swapaxes(Y, 1, -1)

  print(X.shape, Y.shape)
#+end_src

#+RESULTS:
: (96, 51, 693) (96, 51, 693)

#+begin_src ipython
  X = torch.tensor(X, dtype=torch.float32, device=device)
  Y = torch.tensor(Y, dtype=torch.float32, device=device)
  print(X.shape, Y.shape)
#+end_src

#+RESULTS:
: torch.Size([96, 51, 693]) torch.Size([96, 51, 693])

#+begin_src ipython
  import torch
  from torch.utils.data import TensorDataset, DataLoader
  from sklearn.preprocessing import StandardScaler, MinMaxScaler

  # Hyperparameters
  num_epochs = 52
  num_features = X.shape[-1]
  batch_size = 5
  learning_rate = 0.001
  hidden_size = 2*X.shape[-1]
  num_layers = 1

  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  # Split the dataset into training and validation sets
  train_size = int(0.8 * X.shape[0])
  val_size = X.shape[0] - train_size

  X_train = X[:train_size]
  X_test = X[train_size:]

  Y_train = Y[:train_size]
  Y_test = Y[train_size:]

  # scaler = StandardScaler() # or MinMaxScaler()
  # scaler.fit(X_train)
  # X_train_scaled = scaler.transform(X_train)
  # X_test_scaled = scaler.transform(X_test)

  # scaler.fit(Y_train)
  # Y_train_scaled = scaler.transform(Y_train)
  # Y_test_scaled = scaler.transform(Y_test)

  # Create data sets
  train_dataset = TensorDataset(X_train, Y_train)
  val_dataset = TensorDataset(X_test, Y_test)

  # # Create data loaders
  train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
  val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

  # # Define Model
  model = MultivariateRNN(input_size=num_features, hidden_size=hidden_size, num_layers=num_layers, output_size=num_features)
  model = model.to(device)

  # # Loss and optimizer
  criterion = nn.MSELoss()
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  import torch.optim as optim

  # Define the number of epochs.
  num_epochs = 100  # Adjust the number of epochs

  # Training loop.
  for epoch in range(num_epochs):
      model.train()
      for batch_idx, (data, targets) in enumerate(train_loader):
          # Forward pass.
          outputs = model(data)
          loss = criterion(outputs, targets)

          # Backward pass and optimization.
          optimizer.zero_grad()
          loss.backward()
          optimizer.step()

      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in val_loader:
              outputs = model(data)
              loss = criterion(outputs, targets)
              val_loss += loss.item() * data.size(0)
      val_loss /= len(val_loader.dataset)

      # Print training/validation statistics.
      # You may want to save the model if it has improved.
      if epoch % 10:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')
  # Don't forget to switch to CPU/GPU based on your setup:
  # model.to('cuda') or model.to('cpu')
#+end_src

#+RESULTS:
#+begin_example
  Epoch 2/100, Training Loss: 0.0013, Validation Loss: 0.0013
  Epoch 3/100, Training Loss: 0.0012, Validation Loss: 0.0012
  Epoch 4/100, Training Loss: 0.0011, Validation Loss: 0.0011
  Epoch 5/100, Training Loss: 0.0011, Validation Loss: 0.0011
  Epoch 6/100, Training Loss: 0.0010, Validation Loss: 0.0010
  Epoch 7/100, Training Loss: 0.0010, Validation Loss: 0.0009
  Epoch 8/100, Training Loss: 0.0009, Validation Loss: 0.0009
  Epoch 9/100, Training Loss: 0.0009, Validation Loss: 0.0009
  Epoch 10/100, Training Loss: 0.0009, Validation Loss: 0.0008
  Epoch 12/100, Training Loss: 0.0008, Validation Loss: 0.0008
  Epoch 13/100, Training Loss: 0.0008, Validation Loss: 0.0008
  Epoch 14/100, Training Loss: 0.0008, Validation Loss: 0.0008
  Epoch 15/100, Training Loss: 0.0008, Validation Loss: 0.0008
  Epoch 16/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 17/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 18/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 19/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 20/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 22/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 23/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 24/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 25/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 26/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 27/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 28/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 29/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 30/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 32/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 33/100, Training Loss: 0.0006, Validation Loss: 0.0007
  Epoch 34/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 35/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 36/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 37/100, Training Loss: 0.0006, Validation Loss: 0.0007
  Epoch 38/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 39/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 40/100, Training Loss: 0.0006, Validation Loss: 0.0007
  Epoch 42/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 43/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 44/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 45/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 46/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 47/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 48/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 49/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 50/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 52/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 53/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 54/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 55/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 56/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 57/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 58/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 59/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 60/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 62/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 63/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 64/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 65/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 66/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 67/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 68/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 69/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 70/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 72/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 73/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 74/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 75/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 76/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 77/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 78/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 79/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 80/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 82/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 83/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 84/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 85/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 86/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 87/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 88/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 89/100, Training Loss: 0.0007, Validation Loss: 0.0007
  Epoch 90/100, Training Loss: 0.0006, Validation Loss: 0.0007
  Epoch 92/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 93/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 94/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 95/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 96/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 97/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 98/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 99/100, Training Loss: 0.0006, Validation Loss: 0.0006
  Epoch 100/100, Training Loss: 0.0006, Validation Loss: 0.0006
#+end_example

* Reverse Engineering
** Generate series

#+begin_src ipython
  model.eval()  # Set the model to evaluation mode

  input_size = X.shape[-1]  # Number of features
  sequence_length = X.shape[1]

  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  # Start with an initial seed sequence
  seed_sequence = torch.randn(1, 1, input_size).to(device)  # Replace with your actual seed

  # Decide how many future steps you want to predict
  future_steps = X.shape[1]

  # Collect predictions
  predictions = []

  # Initialize the hidden state (optional, depends on your model architecture)
  hidden = torch.zeros(num_layers, 1, hidden_size).to(device)

  # Generate time series
  for _ in range(future_steps):
      # Forward pass
      with torch.no_grad():  # No need to track gradients
          out, hidden = model.rnn(seed_sequence, hidden)
          next_step = model.fc(out[:, -1, :])  # Output for the last time step

      predictions.append(next_step.cpu().numpy())

      # Use the predicted next step as the input for the next iteration
      next_step = next_step.unsqueeze(1)  # Add the sequence length dimension
      seed_sequence = torch.cat((seed_sequence[:, 1:, :], next_step), 1)  # Move the window

  # # Convert predictions to a numpy array for further analysis
  predicted_time_series = np.concatenate(predictions, axis=0)
#+end_src

#+RESULTS:

#+begin_src ipython
  import numpy as np
  import matplotlib.pyplot as plt

  # Assuming 'predicted_time_series' is a numpy array containing your generated data
  # Each column in 'predicted_time_series' corresponds to a different feature in the time series

  # Plot each feature of the time series
  num_features = predicted_time_series.shape[1]
  plt.figure(figsize=(12, 6))
  for i in range(10):
      plt.plot(predicted_time_series[:, i], lw=2)
      plt.plot(X.cpu().numpy()[0, :, i])

  plt.xlabel('Time')
  plt.ylabel('Feature Value')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5a677a53cbe99d54ee6b6a0061052ee68ffb63a9.png]]

** Connectivity

#+begin_src ipython
  weights = model.rnn.weight_hh_l0.data.cpu().numpy()  # Get the recurring weights of the RNN

  print(weights.shape)
  # Perform singular value decomposition<
  U, S, Vt = np.linalg.svd(weights, full_matrices=False)

  u1, u2 = U[:, 0], U[:, 1]  # First two left singular vectors
  v1, v2 = Vt[0, :], Vt[1, :]  # First two right singular vectors
#+end_src

#+RESULTS:
: (1386, 1386)

#+begin_src ipython
  ksi = S[0] * u1 * v1
  ksi2 = S[1] * u2 * v2
  print(ksi.shape)
#+end_src

#+RESULTS:
: (1386,)

#+begin_src ipython
  plt.imshow(abs(weights), cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a0b3015f96a09abcd14dcd283fcddc2b20bec5e1.png]]

#+begin_src ipython
print(S[:10])
#+end_src

#+RESULTS:
: [4.4918222 3.5256464 2.5086873 2.3548281 2.2375033 2.0677576 1.9438931
:  1.8676409 1.7958629 1.7438583]

#+begin_src ipython
  theta = np.arctan2(ksi2, ksi)
  index = theta.argsort()
  print(index.shape)
#+end_src

#+RESULTS:
: (1386,)

#+begin_src ipython
  Jij = weights[index][index]
  print(Jij.shape)
#+end_src

#+RESULTS:
: (1386, 1386)

#+begin_src ipython
  plt.imshow(abs(Jij), cmap='jet', vmin=0.0)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d235ec720174f562b2acd6f278f13488a0729ffa.png]]

#+begin_src ipython
  # Plot the singular values
  plt.figure(figsize=(10, 5))
  plt.plot(S)
  plt.yscale('log')  # Log scale can be helpful to see the drop-off more clearly
  plt.title('Singular Values of the RNN Hidden-to-Hidden Weight Matrix')
  plt.ylabel('Singular values (log scale)')
  plt.xlabel('Index')
  plt.grid(True)
  plt.show()

  # To see the cumulative energy, plot the cumulative sum of squares of singular values
  cumulative_energy = np.cumsum(S*2) / np.sum(S*2)
  plt.figure(figsize=(10, 5))
  plt.plot(cumulative_energy)
  plt.title('Cumulative Sum of Squares of Singular Values')
  plt.ylabel('Cumulative energy')
  plt.xlabel('Index')
  plt.grid(True)
  plt.show()

#+end_src

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/c9105ade14a8a9ac213f6a80b0e846ff57a80de1.png]]
[[file:./.ob-jupyter/499e216cbff9b341a48b42fbad3d46522e15798f.png]]
:END:
