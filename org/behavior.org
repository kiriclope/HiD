#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data
# #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:/home/leon/.local/share/jupyter/runtime/kernel-4609abbb-da25-465e-bc86-5b54c62abbfc.json :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/dual_task/dual_data/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import numpy as np
  import matplotlib.pyplot as plt

  from scipy.io import loadmat
  from dual_data.licks.licks import *
#+end_src

#+RESULTS:

* Licks
*** Data
#+begin_src ipython
  # path = '../data/behavior/DualTask_DPA_vs_Single_DPA/'
  path = '../data/behavior/DualTask-Silencing-ACC-Prl/'
  # path = '../data/behavior/DualTask-Silencing-Prl-ACC/'
  # path = '../data/behavior/DualTask-Silencing-ACC/'
#+end_src

#+RESULTS:
*** Single Mouse
#+begin_src ipython
  i_mouse = 1
  i_session = 2
  
  if 'DPA' in path:
      session = 'Dual' # control opto DPA or Dual
  else:
      session = 'control' # control opto DPA or Dual

  data = loadmat(path + session + '_mouse_%d/session_%d' % (i_mouse, i_session))
#+end_src

#+RESULTS:

#+begin_src ipython
  licks_dpa, licks_go, licks_nogo = get_licks_mouse(data, path, response='correct', trial_length=20, verbose=1)
  licks_all = [np.hstack(licks_dpa), np.hstack(licks_go), np.hstack(licks_nogo)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto')
  plt.ylim([0, 1])
  plt.savefig('licks_first.svg', dpi=300)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mIndexError[0m                                Traceback (most recent call last)
  Cell [0;32mIn[23], line 1[0m
  [0;32m----> 1[0m licks_dpa, licks_go, licks_nogo [38;5;241m=[39m [43mget_licks_mouse[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mpath[49m[43m,[49m[43m [49m[43mresponse[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43mcorrect[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mtrial_length[49m[38;5;241;43m=[39;49m[38;5;241;43m20[39;49m[43m,[49m[43m [49m[43mverbose[49m[38;5;241;43m=[39;49m[38;5;241;43m1[39;49m[43m)[49m
  [1;32m      2[0m licks_all [38;5;241m=[39m [np[38;5;241m.[39mhstack(licks_dpa), np[38;5;241m.[39mhstack(licks_go), np[38;5;241m.[39mhstack(licks_nogo)]
  [1;32m      3[0m licks_density, bins [38;5;241m=[39m plot_licks_hist(licks_all, n_bins[38;5;241m=[39m[38;5;124m'[39m[38;5;124mauto[39m[38;5;124m'[39m)

  File [0;32m~/dual_task/dual_data/org/../dual_data/licks/licks.py:387[0m, in [0;36mget_licks_mouse[0;34m(data, mouse, response, trial_length, verbose)[0m
  [1;32m    374[0m [38;5;28;01mdef[39;00m [38;5;21mget_licks_mouse[39m(data, mouse, response[38;5;241m=[39m[38;5;124m"[39m[38;5;124m"[39m, trial_length[38;5;241m=[39m[38;5;241m20[39m, verbose[38;5;241m=[39m[38;5;241m1[39m):
  [1;32m    375[0m     [38;5;66;03m# if verbose:[39;00m
  [1;32m    376[0m     [38;5;66;03m#     print("get licks time")[39;00m
  [1;32m    378[0m     (
  [1;32m    379[0m         t_licks,
  [1;32m    380[0m         t_sample,
  [1;32m    381[0m         t_dist,
  [1;32m    382[0m         t_test,
  [1;32m    383[0m         t_go,
  [1;32m    384[0m         t_nogo,
  [1;32m    385[0m         t_correct,
  [1;32m    386[0m         t_incorrect,
  [0;32m--> 387[0m     ) [38;5;241m=[39m [43mget_licks_and_times[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mmouse[49m[43m)[49m
  [1;32m    389[0m     [38;5;66;03m# if verbose:[39;00m
  [1;32m    390[0m     [38;5;66;03m#     print("get serie")[39;00m
  [1;32m    392[0m     events_serie [38;5;241m=[39m convert_to_serie(t_sample[[38;5;241m0[39m], t_dist[[38;5;241m0[39m], t_test[[38;5;241m0[39m])

  File [0;32m~/dual_task/dual_data/org/../dual_data/licks/licks.py:207[0m, in [0;36mget_licks_and_times[0;34m(data, mouse)[0m
  [1;32m    204[0m [38;5;66;03m# print("nogo", np.array(t_NoGo_on).shape, np.array(t_NoGo_off).shape)[39;00m
  [1;32m    205[0m t_nogo [38;5;241m=[39m vstack_nan(t_NoGo_on, t_NoGo_off)
  [0;32m--> 207[0m licks [38;5;241m=[39m (licks [38;5;241m-[39m [43mt_sample[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m) [38;5;241m/[39m [38;5;241m1000[39m
  [1;32m    208[0m t_dist [38;5;241m=[39m (t_dist [38;5;241m-[39m t_sample[[38;5;241m0[39m][[38;5;241m0[39m]) [38;5;241m/[39m [38;5;241m1000[39m
  [1;32m    209[0m t_test [38;5;241m=[39m (t_test [38;5;241m-[39m t_sample[[38;5;241m0[39m][[38;5;241m0[39m]) [38;5;241m/[39m [38;5;241m1000[39m

  [0;31mIndexError[0m: index 0 is out of bounds for axis 0 with size 0
#+end_example
:END:

*** All mice
**** Control
***** First Sessions
#+begin_src ipython 
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=0, n_session=3, response="correct")

  n_mice = 9 # 9 control 9 opto
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])
  
  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('First Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_first.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/706078d060d5e89d64a59a67d3eb92fa1c0e649a.png]]
:END:

***** Middle Sessions
#+begin_src ipython 
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=4, n_session=6, response="incorrect")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Middle Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_middle.svg', dpi=300)  
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/eb65a854fe97fe1fc6d65ea951052e295b67b1ad.png]]
:END:

***** Last Sessions
#+begin_src ipython 
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=7, n_session=10, response="correct")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Last Days')
  plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])
  plt.savefig('licks_last.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1810517c805323f89f05f4559b8a9be07f729b41.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
