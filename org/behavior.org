#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session behavior :kernel dual_data
#  #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:/home/leon/.local/share/jupyter/runtime/kernel-4609abbb-da25-465e-bc86-5b54c62abbfc.json :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/dual_task/src/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
# [goto error]
#+begin_example
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/IPython/core/magics/execution.py:701, in ExecutionMagics.run(self, parameter_s, runner, file_finder)
    700     fpath = arg_lst[0]
--> 701     filename = file_finder(fpath)
    702 except IndexError as e:

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/IPython/utils/path.py:90, in get_py_filename(name)
     89         return py_name
---> 90 raise IOError("File `%r` not found." % name)

OSError: File `'/home/leon/dual_task/src/notebooks/setup.py'` not found.

The above exception was the direct cause of the following exception:

Exception                                 Traceback (most recent call last)
Cell In[1], line 5
      2 get_ipython().run_line_magic('autoreload', '2')
      3 get_ipython().run_line_magic('reload_ext', 'autoreload')
----> 5 get_ipython().run_line_magic('run', '/home/leon/dual_task/src/notebooks/setup.py')
      6 get_ipython().run_line_magic('matplotlib', 'inline')
      7 get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'png'")

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/IPython/core/interactiveshell.py:2417, in InteractiveShell.run_line_magic(self, magic_name, line, _stack_depth)
   2415     kwargs['local_ns'] = self.get_local_scope(stack_depth)
   2416 with self.builtin_trap:
-> 2417     result = fn(*args, **kwargs)
   2419 # The code below prevents the output from being displayed
   2420 # when using magics with decodator @output_can_be_silenced
   2421 # when the last Python token in the expression is a ';'.
   2422 if getattr(fn, magic.MAGIC_OUTPUT_CAN_BE_SILENCED, False):

File ~/mambaforge/envs/dual_data/lib/python3.11/site-packages/IPython/core/magics/execution.py:712, in ExecutionMagics.run(self, parameter_s, runner, file_finder)
    710     if os.name == 'nt' and re.match(r"^'.*'$",fpath):
    711         warn('For Windows, use double quotes to wrap a filename: %run "mypath\\myfile.py"')
--> 712     raise Exception(msg) from e
    713 except TypeError:
    714     if fpath in sys.meta_path:

Exception: File `'/home/leon/dual_task/src/notebooks/setup.py'` not found.
#+end_example
:END:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import numpy as np
  import matplotlib.pyplot as plt

  from scipy.io import loadmat
  from src.licks.licks import *
#+end_src

#+RESULTS:

* Licks
*** Data
#+begin_src ipython
  # path = '../data/behavior/DualTask_DPA_vs_Single_DPA/'
  path = '../data/behavior/DualTask-Silencing-ACC-Prl/'
  # path = '../data/behavior/DualTask-Silencing-Prl-ACC/'
  # path = '../data/behavior/DualTask-Silencing-ACC/'
#+end_src

#+RESULTS:
*** Single Mouse
#+begin_src ipython
  i_mouse = 1
  i_session = 2

  if 'DPA' in path:
      session = 'Dual' # control opto DPA or Dual
  else:
      session = 'control' # control opto DPA or Dual

  data = loadmat(path + session + '_mouse_%d/session_%d' % (i_mouse, i_session))
#+end_src

#+RESULTS:

#+begin_src ipython
  licks_dpa, licks_go, licks_nogo = get_licks_mouse(data, path, response='correct', trial_length=20, verbose=1)
  licks_all = [np.hstack(licks_dpa), np.hstack(licks_go), np.hstack(licks_nogo)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto')
  plt.ylim([0, 1])
  plt.savefig('licks_first.svg', dpi=300)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  ---------------------------------------------------------------------------
  IndexError                                Traceback (most recent call last)
  Cell In[23], line 1
  ----> 1 licks_dpa, licks_go, licks_nogo = get_licks_mouse(data, path, response='correct', trial_length=20, verbose=1)
        2 licks_all = [np.hstack(licks_dpa), np.hstack(licks_go), np.hstack(licks_nogo)]
        3 licks_density, bins = plot_licks_hist(licks_all, n_bins='auto')

  File ~/dual_task/src.org/../src.licks/licks.py:387, in get_licks_mouse(data, mouse, response, trial_length, verbose)
      374 def get_licks_mouse(data, mouse, response="", trial_length=20, verbose=1):
      375     # if verbose:
      376     #     print("get licks time")
      378     (
      379         t_licks,
      380         t_sample,
      381         t_dist,
      382         t_test,
      383         t_go,
      384         t_nogo,
      385         t_correct,
      386         t_incorrect,
  --> 387     ) = get_licks_and_times(data, mouse)
      389     # if verbose:
      390     #     print("get serie")
      392     events_serie = convert_to_serie(t_sample[0], t_dist[0], t_test[0])

  File ~/dual_task/src.org/../src.licks/licks.py:207, in get_licks_and_times(data, mouse)
      204 # print("nogo", np.array(t_NoGo_on).shape, np.array(t_NoGo_off).shape)
      205 t_nogo = vstack_nan(t_NoGo_on, t_NoGo_off)
  --> 207 licks = (licks - t_sample[0][0]) / 1000
      208 t_dist = (t_dist - t_sample[0][0]) / 1000
      209 t_test = (t_test - t_sample[0][0]) / 1000

  IndexError: index 0 is out of bounds for axis 0 with size 0
#+end_example
:END:

*** All mice
**** Control
***** First Sessions
#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=0, n_session=3, response="correct")

  n_mice = 9 # 9 control 9 opto
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('First Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_first.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/706078d060d5e89d64a59a67d3eb92fa1c0e649a.png]]
:END:

***** Middle Sessions
#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=4, n_session=6, response="incorrect")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Middle Days')
  # plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])

  plt.savefig('licks_middle.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  mouse control_mouse_0
  mouse control_mouse_1
  mouse control_mouse_2
  mouse control_mouse_3
  mouse control_mouse_4
  mouse control_mouse_5
  mouse control_mouse_6
  mouse control_mouse_7
  mouse control_mouse_8
  mouse opto_mouse_0
  mouse opto_mouse_1
  mouse opto_mouse_2
  mouse opto_mouse_3
  mouse opto_mouse_4
  mouse opto_mouse_5
  mouse opto_mouse_6
  mouse opto_mouse_7
  mouse opto_mouse_8
#+end_example
[[file:./.ob-jupyter/eb65a854fe97fe1fc6d65ea951052e295b67b1ad.png]]
:END:

***** Last Sessions
#+begin_src ipython
  mice_dpa, mice_go, mice_nogo = get_licks_mice(path, ini=7, n_session=10, response="correct")

  n_mice = 9
  dpa_all = hstack_with_padding(mice_dpa[:n_mice])
  go_all = hstack_with_padding(mice_go[:n_mice])
  nogo_all = hstack_with_padding(mice_nogo[:n_mice])

  licks_all = [ np.hstack(dpa_all), np.hstack(go_all), np.hstack(nogo_all)]
  licks_density, bins = plot_licks_hist(licks_all, n_bins='auto', n_mice=n_mice)

  plt.title('Last Days')
  plt.ylim([0, 1])
  # plt.yticks([0, 10, 20])
  plt.savefig('licks_last.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1810517c805323f89f05f4559b8a9be07f729b41.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
