#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session glm :kernel dual_data :exports results :output-dir ./figures/overlaps :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run /home/leon/dual_task/dual_data/notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports
#+begin_src ipython
  from sklearn.exceptions import ConvergenceWarning
  warnings.filterwarnings("ignore")
  import traceback

  import sys
  sys.path.insert(0, '/home/leon/dual_task/dual_data/')

  import os
  if not sys.warnoptions:
    warnings.simplefilter("ignore")
    os.environ["PYTHONWARNINGS"] = "ignore"

  import pickle as pkl
  import numpy as np
  import matplotlib.pyplot as plt
  import pandas as pd

  from time import perf_counter

  from sklearn.base import clone
  from sklearn.metrics import make_scorer, roc_auc_score
  from sklearn.preprocessing import StandardScaler, RobustScaler
  from sklearn.model_selection import RepeatedStratifiedKFold, LeaveOneOut, StratifiedKFold

  from src.common.plot_utils import add_vlines, add_vdashed
  from src.common.options import set_options
  from src.stats.bootstrap import my_boots_ci
  from src.common.get_data import get_X_y_days, get_X_y_S1_S2
  from src.preprocess.helpers import avg_epochs

  from src.torch.classificationCV import ClassificationCV
  from src.torch.main import get_classification
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
def pad_with_nans(array, target_shape):
    result = np.full(target_shape, np.nan)  # Create an array filled with NaNs
    print(result.shape)
    slices = tuple(slice(0, min(dim, target)) for dim, target in zip(array.shape, target_shape))
    result[slices] = array[slices]
    return result
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import numpy as np

  def safe_roc_auc_score(y_true, y_score):
      y_true = np.asarray(y_true)
      if len(np.unique(y_true)) == 1:
          return np.nan  # return np.nan where the score cannot be calculated
      return roc_auc_score(y_true, y_score)
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def rescale_coefs(model, coefs, bias):

          try:
                  means = model.named_steps["scaler"].mean_
                  scales = model.named_steps["scaler"].scale_

                  # Rescale the coefficients
                  rescaled_coefs = np.true_divide(coefs, scales)

                  # Adjust the intercept
                  rescaled_bias = bias - np.sum(rescaled_coefs * means)

                  return rescaled_coefs, rescaled_bias
          except:
                  return coefs, bias

#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  from scipy.stats import bootstrap

  def get_bootstrap_ci(data, statistic=np.mean, confidence_level=0.95, n_resamples=1000, random_state=None):
      result = bootstrap((data,), statistic)
      ci_lower, ci_upper = result.confidence_interval
      return np.array([ci_lower, ci_upper])
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/torch/utils.py
  import pickle as pkl

  def pkl_save(obj, name, path="."):
      os.makedirs(path, exist_ok=True)
      destination = path + "/" + name + ".pkl"
      print("saving to", destination)
      pkl.dump(obj, open(destination, "wb"))


  def pkl_load(name, path="."):
      source = path + "/" + name + '.pkl'
      print('loading from', source)
      return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  DEVICE = 'cuda:0'
  mice = ['ChRM04','JawsM15', 'JawsM18', 'ACCM03', 'ACCM04']
  N_NEURONS = [668, 693, 444, 361, 113]

  tasks = ['DPA', 'DualGo', 'DualNoGo']
  # mice = ['AP02', 'AP12', 'PP09', 'PP17', 'RP17']
  # mice = ['AP02']

  kwargs = {
      'mouse': 'ChRM04', 'laser': 0,
      'trials': '', 'reload': 0, 'data_type': 'dF',
      'prescreen': None, 'pval': 0.05,
      'preprocess': False, 'scaler_BL': 'robust',
      'avg_noise':True, 'unit_var_BL': True,
      'random_state': None, 'T_WINDOW': 0.0,
      'l1_ratio': 0.95,
      'n_comp': None, 'scaler': None,
      'bootstrap': 1, 'n_boots': 128,
      'n_splits': 3, 'n_repeats': 32,
      'class_weight': 0,
      'multilabel':0,
  }

  kwargs['days'] = ['first', 'middle', 'last']
  # kwargs['days'] = np.arange(1, options['n_days']+1)
  options = set_options(**kwargs)
  safe_roc_auc = make_scorer(safe_roc_auc_score, needs_proba=True)
  options['hp_scoring'] = safe_roc_auc
  options['n_jobs'] = 30
#+end_src

#+RESULTS:

#+begin_src ipython
def overlaps_scorer(estimator, X_test, y_test, IF_SIGN=0):
    coef = estimator.named_steps["net"].coef_.flatten()
    if IF_SIGN:
        dot_product = (2*y_test -1) * np.dot(X_test, coef) / np.linalg.norm(coef)
    else:
        dot_product = -np.dot(X_test, coef) / np.linalg.norm(coef)

    return dot_product.mean()


options['scoring'] = overlaps_scorer
# options['hp_scoring'] = 'overlaps_scorer'
#+end_src

#+RESULTS:

#+begin_src ipython
def signed_overlaps_scorer(estimator, X_test, y_test, IF_SIGN=1):
    coef = estimator.named_steps["net"].coef_.flatten()
    if IF_SIGN:
        dot_product = (2*y_test -1) * np.dot(X_test, coef) / np.linalg.norm(coef)
    else:
        dot_product = -np.dot(X_test, coef) / np.linalg.norm(coef)

    return dot_product.mean()


options['scoring'] = overlaps_scorer
# options['hp_scoring'] = 'overlaps_scorer'
#+end_src

#+RESULTS:

* Plots

#+begin_src ipython
def significance_marker(p):
    if p < 0.001:
        return '***'
    elif p < 0.01:
        return '**'
    elif p < 0.05:
        return '*'
    elif p <.1:
        return '.'
    else:
        return ''
#+end_src

#+RESULTS:

#+begin_src ipython
import rpy2.robjects as robjects
from rpy2.robjects.packages import importr

# Set the .libPaths in R
custom_r_libpath = '~/R/x86_64-pc-linux-gnu-library/4.3/'
robjects.r('.libPaths("{0}")'.format(custom_r_libpath))

from pymer4.models import Lmer
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlaps(df, day, epoch, ax, n_boots=1000):
    df_ = df[df.day == day].copy()
    colors = ['r', 'b', 'g']
    time_points = np.linspace(0, 14, 84)

    mean_overlaps = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: np.mean(np.stack(x), axis=0))
    lower_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, n_boots, 0))
    upper_cis = df_.groupby('tasks')['overlaps_%s' % epoch].apply(lambda x: bootstrap_ci_per_task(x, n_boots, 1))

    for i, task in enumerate(mean_overlaps.index):
        ax.plot(time_points, mean_overlaps[task], label=f"Day {task}", color=colors[i])
        ax.fill_between(time_points, lower_cis[task], upper_cis[task], color=colors[i], alpha=0.1)

    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Overlap')
    add_vlines(ax)

def bootstrap_ci_per_task(x, n_bootstrap, ci_idx):
    stacked = np.stack(x)
    return np.array([bootstrap_ci(stacked[:, i], n_bootstrap)[ci_idx] for i in range(stacked.shape[1])])
#+end_src

#+RESULTS:

#+begin_src ipython
def bootstrap_ci(data, n_bootstrap=1000, ci=95):
    bootstrapped_means = np.array([np.mean(np.random.choice(data, size=len(data))) for _ in range(n_bootstrap)])
    lower_bound = np.percentile(bootstrapped_means, (100-ci)/2)
    upper_bound = np.percentile(bootstrapped_means, 100 - (100-ci)/2)
    return lower_bound, upper_bound
#+end_src

#+RESULTS:

* Data
** Sample
#+begin_src ipython
name = 'df_sample_overlaps'
df_sample = pkl_load(name, path="../data/mice/overlaps")
#+end_src

#+RESULTS:
: loading from ../data/mice/overlaps/df_sample_overlaps.pkl

 #+begin_src ipython
df_sample['overlaps_diag'] = df_sample['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
#+end_src

#+RESULTS:

 #+begin_src ipython
options['epochs'] = ['ED']
df_sample['overlaps_ED'] = df_sample['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))
#+end_src
#+RESULTS:

 #+begin_src ipython
options['epochs'] = ['MD']
df_sample['overlaps_MD'] = df_sample['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['LD']
df_sample['overlaps_ED_LD'] = df_sample['overlaps_ED'].apply(lambda x: avg_epochs(np.array(x), **options))
df_sample['overlaps_diag_LD'] = df_sample['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
df_sample['overlaps_MD_LD'] = df_sample['overlaps_MD'].apply(lambda x: avg_epochs(np.array(x), **options))
# print(df_sample.head())
#+end_src

#+RESULTS:

** Distractor

#+begin_src ipython
name = 'df_distractor_overlaps'
df_dist = pkl_load(name, path="../data/mice/overlaps")
#+end_src

#+RESULTS:
: loading from ../data/mice/overlaps/df_distractor_overlaps.pkl

#+begin_src ipython
df_dist['overlaps_diag'] = df_dist['overlaps'].apply(lambda x: np.diag(np.array(x).reshape(84, 84)))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['MD']
df_dist['overlaps_MD'] = df_dist['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['DIST']
df_dist['overlaps_DIST'] = df_dist['overlaps'].apply(lambda x: avg_epochs(np.array(x).reshape(84, 84).T, **options))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['ED']
df_dist['overlaps_MD_ED'] = df_dist['overlaps_MD'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['overlaps_diag_ED'] = df_dist['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['sign_overlaps_MD_ED'] = df_dist['overlaps_MD'].apply(lambda x: np.sign(avg_epochs(np.array(x), **options)))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['MD']
df_dist['overlaps_MD_MD'] = df_dist['overlaps_MD'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['overlaps_diag_MD'] = df_dist['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['sign_overlaps_MD_MD'] = df_dist['overlaps_MD'].apply(lambda x: np.sign(avg_epochs(np.array(x), **options)))
#+end_src

#+RESULTS:

#+begin_src ipython
options['epochs'] = ['LD']
df_dist['overlaps_MD_LD'] = df_dist['overlaps_MD'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['overlaps_diag_LD'] = df_dist['overlaps_diag'].apply(lambda x: avg_epochs(np.array(x), **options))
df_dist['sign_overlaps_MD_LD'] = df_dist['overlaps_MD'].apply(lambda x: np.sign(avg_epochs(np.array(x), **options)))
#+end_src

#+RESULTS:

** Performance and overlaps

#+begin_src ipython
import seaborn as sns

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(3*width, height), sharex=True, sharey=False)
# df = df_sample.copy()
# df = df[df.mouse != 'JawsM18']
# df = df[df.mouse != 'ACCM04']
# sns.lineplot(data=df, x='day', y='performance', hue='tasks', marker='o', legend=0, palette=['r', 'b', 'g'], ax=ax[0])
# ax[0].set_xlabel('Day')
# ax[0].set_ylabel('Performance')

# sns.lineplot(data=df, x='day', y='overlaps_ED_LD', hue='tasks', marker='o', legend=0, palette=['r', 'b', 'g'], ax=ax[1])
# ax[1].set_xlabel('Day')
# ax[1].set_ylabel('Sample Overlap')

df = df_dist.copy()
df = df[df.mouse != 'JawsM18']
# df = df[df.mouse != 'ACCM04']

sns.lineplot(data=df, x='day', y='overlaps_MD_ED', hue='tasks', marker='o', legend=0, palette=['r', 'b', 'g'], ax=ax[2])
ax[2].set_xlabel('Day')
ax[2].set_ylabel('Dist. Overlap')

plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_27.png]]

#+begin_src ipython
fig, ax = plt.subplots(nrows=2, ncols=3, figsize=(3*width, 2*height))

# df = df_sample.copy()
# df = df[df.mouse != 'JawsM18']

# plot_overlaps(df, 'first', 'ED', ax[0][0])
# plot_overlaps(df, 'middle', 'ED', ax[0][1])
# plot_overlaps(df, 'last', 'ED', ax[0][2])

df = df_dist.copy()
df = df[df.mouse != 'JawsM18']

plot_overlaps(df, 'first', 'MD', ax[1][0])
plot_overlaps(df, 'middle', 'MD', ax[1][1])
plot_overlaps(df, 'last', 'MD', ax[1][2])

ax[1][2].legend(fontsize=10)

plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_28.png]]

** GLMs
*** Performance ~ day * tasks

#+begin_src ipython
  formula = 'performance ~ day * tasks + (day + tasks | mouse)'
  data = df_sample.copy()
  data = data[data.mouse!='JawsM18']
  # data = data[data.mouse !='ACCM04']
  # data = data[data.mouse !='ChRM04']

  glm = Lmer(formula=formula, data=data, family='binomial')
  result = glm.fit()
  print(result)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[47], line 2
:       1 formula = 'performance ~ day * tasks + (day + tasks | mouse)'
: ----> 2 data = df_sample.copy()
:       3 data = data[data.mouse!='JawsM18']
:       4 # data = data[data.mouse !='ACCM04']
:       5 # data = data[data.mouse !='ChRM04']
:
: NameError: name 'df_sample' is not defined
:END:

#+begin_src ipython
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Assuming you already have model and glm.coef()
coefficients = {
    'coef': glm.coefs['Estimate'],
    'lower_ci': glm.coefs['2.5_ci'],
    'upper_ci': glm.coefs['97.5_ci'],
    'p_value': glm.coefs['P-val']
}

df_coefs = pd.DataFrame(coefficients)


df_coefs['marker'] = df_coefs['p_value'].apply(significance_marker)

#  Plot coefficients with error bars and significance markers
plt.figure(figsize=(10, 6))
plt.errorbar(df_coefs.index, df_coefs['coef'], yerr=[df_coefs['coef'] - df_coefs['lower_ci'], df_coefs['upper_ci'] - df_coefs['coef']], fmt='o')
plt.axhline(y=0, color='grey', linestyle='--')
plt.xlabel('Coefficient')
plt.ylabel('Estimate')
# plt.title('Coefficient Estimates with 95% Confidence Intervals')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()

# Add significance markers
for i, (coef, marker) in enumerate(zip(df_coefs['coef'], df_coefs['marker'])):
    plt.text(i, coef+1, f'{marker}', fontsize=22, ha='center', va='bottom')

plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_30.png]]

*** Performance ~ sample overlaps * days

#+begin_src ipython
  formula = 'performance ~ day * overlaps_ED_LD  + (1 + day + tasks | mouse)'

  data = df_sample.copy()
  data = data[data.mouse!='JawsM18']
  # data = data[data.mouse !='ACCM04']
  # data = data[data.mouse !='ChRM04']

  glm = Lmer(formula=formula, data=data, family='binomial')
  result = glm.fit()
  print(result)
#+end_src

#+RESULTS:
#+begin_example
Model failed to converge with max|grad| = 0.00638875 (tol = 0.002, component 1)

Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: performance~day*overlaps_ED_LD+(1+day+tasks|mouse)

Family: binomial	 Inference: parametric

Number of observations: 3072	 Groups: {'mouse': 4.0}

Log-likelihood: -1602.801 	 AIC: 3247.601

Random effects:

                Name    Var    Std
mouse    (Intercept)  0.181  0.425
mouse        daylast  0.365  0.604
mouse      daymiddle  0.173  0.416
mouse    tasksDualGo  0.232  0.482
mouse  tasksDualNoGo  0.016  0.125

               IV1            IV2   Corr
mouse  (Intercept)        daylast -0.300
mouse  (Intercept)      daymiddle  0.795
mouse  (Intercept)    tasksDualGo -0.226
mouse  (Intercept)  tasksDualNoGo -0.768
mouse      daylast      daymiddle  0.338
mouse      daylast    tasksDualGo -0.708
mouse      daylast  tasksDualNoGo -0.227
mouse    daymiddle    tasksDualGo -0.699
mouse    daymiddle  tasksDualNoGo -0.923
mouse  tasksDualGo  tasksDualNoGo  0.792

Fixed effects:

                          Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  \
(Intercept)                  0.617   0.091    1.143  0.268  1.853      1.096
daylast                      1.047   0.387    1.707  0.337  2.849      1.473
daymiddle                    0.922   0.370    1.474  0.282  2.514      1.448
overlaps_ED_LD               0.036  -0.187    0.260  0.114  1.037      0.829
daylast:overlaps_ED_LD       0.275  -0.186    0.737  0.235  1.317      0.830
daymiddle:overlaps_ED_LD    -0.087  -0.475    0.300  0.198  0.916      0.622

                          OR_97.5_ci   Prob  Prob_2.5_ci  Prob_97.5_ci  \
(Intercept)                    3.135  0.650        0.523         0.758
daylast                        5.512  0.740        0.596         0.846
daymiddle                      4.367  0.715        0.591         0.814
overlaps_ED_LD                 1.296  0.509        0.453         0.565
daylast:overlaps_ED_LD         2.089  0.568        0.454         0.676
daymiddle:overlaps_ED_LD       1.350  0.478        0.383         0.575

                          Z-stat  P-val Sig
(Intercept)                2.300  0.021   *
daylast                    3.110  0.002  **
daymiddle                  3.273  0.001  **
overlaps_ED_LD             0.317  0.751
daylast:overlaps_ED_LD     1.171  0.242
daymiddle:overlaps_ED_LD  -0.442  0.659
#+end_example

#+begin_src ipython
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Assuming you already have model and glm.coef()
coefficients = {
    'coef': glm.coefs['Estimate'],
    'lower_ci': glm.coefs['2.5_ci'],
    'upper_ci': glm.coefs['97.5_ci'],
    'p_value': glm.coefs['P-val']
}

df_coefs = pd.DataFrame(coefficients)

df_coefs['marker'] = df_coefs['p_value'].apply(significance_marker)

#  Plot coefficients with error bars and significance markers
plt.figure(figsize=(10, 6))
plt.errorbar(df_coefs.index, df_coefs['coef'], yerr=[df_coefs['coef'] - df_coefs['lower_ci'], df_coefs['upper_ci'] - df_coefs['coef']], fmt='o')
plt.axhline(y=0, color='grey', linestyle='--')
plt.xlabel('Coefficient')
plt.ylabel('Estimate')
# plt.title('Coefficient Estimates with 95% Confidence Intervals')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()

# Add significance markers
for i, (coef, marker) in enumerate(zip(df_coefs['coef'], df_coefs['marker'])):
    plt.text(i, coef+1, f'{marker}', fontsize=22, ha='center', va='bottom')

plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_32.png]]

*** Performance ~ distractor overlaps * days

#+begin_src ipython
  formula = 'performance ~ day * overlaps_MD_ED  + (1 + day + tasks| mouse)'

  data = df_dist.copy()
  data = data[data.mouse!='JawsM18']
  # data = data[data.mouse !='ACCM04']
  # data = data[data.mouse !='ChRM04']

  glm = Lmer(formula=formula, data=data, family='binomial')
  result = glm.fit()
  print(result)
#+end_src

#+RESULTS:
#+begin_example
boundary (singular) fit: see help('isSingular')

Linear mixed model fit by maximum likelihood  ['lmerMod']
Formula: performance~day*overlaps_MD_ED+(1+day+tasks|mouse)

Family: binomial	 Inference: parametric

Number of observations: 2048	 Groups: {'mouse': 4.0}

Log-likelihood: -1109.330 	 AIC: 2250.660

Random effects:

                Name    Var    Std
mouse    (Intercept)  0.304  0.551
mouse        daylast  0.193  0.440
mouse      daymiddle  0.094  0.307
mouse  tasksDualNoGo  0.122  0.350

               IV1            IV2   Corr
mouse  (Intercept)        daylast -0.781
mouse  (Intercept)      daymiddle  0.376
mouse  (Intercept)  tasksDualNoGo -0.857
mouse      daylast      daymiddle  0.244
mouse      daylast  tasksDualNoGo  0.945
mouse    daymiddle  tasksDualNoGo  0.150

Fixed effects:

                          Estimate  2.5_ci  97.5_ci     SE     OR  OR_2.5_ci  \
(Intercept)                  0.633   0.206    1.060  0.218  1.884      1.229
daylast                      1.109   0.604    1.615  0.258  3.033      1.830
daymiddle                    0.927   0.403    1.451  0.267  2.527      1.497
overlaps_MD_ED               0.166  -0.390    0.721  0.283  1.180      0.677
daylast:overlaps_MD_ED       0.264  -0.604    1.132  0.443  1.302      0.547
daymiddle:overlaps_MD_ED     0.133  -0.698    0.964  0.424  1.142      0.497

                          OR_97.5_ci   Prob  Prob_2.5_ci  Prob_97.5_ci  \
(Intercept)                    2.888  0.653        0.551         0.743
daylast                        5.026  0.752        0.647         0.834
daymiddle                      4.265  0.716        0.600         0.810
overlaps_MD_ED                 2.057  0.541        0.404         0.673
daylast:overlaps_MD_ED         3.102  0.566        0.353         0.756
daymiddle:overlaps_MD_ED       2.621  0.533        0.332         0.724

                          Z-stat  P-val  Sig
(Intercept)                2.906  0.004   **
daylast                    4.305  0.000  ***
daymiddle                  3.470  0.001  ***
overlaps_MD_ED             0.584  0.559
daylast:overlaps_MD_ED     0.596  0.551
daymiddle:overlaps_MD_ED   0.313  0.754
#+end_example

#+begin_src ipython
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Assuming you already have model and glm.coef()
coefficients = {
    'coef': glm.coefs['Estimate'],
    'lower_ci': glm.coefs['2.5_ci'],
    'upper_ci': glm.coefs['97.5_ci'],
    'p_value': glm.coefs['P-val']
}

df_coefs = pd.DataFrame(coefficients)

df_coefs['marker'] = df_coefs['p_value'].apply(significance_marker)

#  Plot coefficients with error bars and significance markers
plt.figure(figsize=(10, 6))
plt.errorbar(df_coefs.index, df_coefs['coef'], yerr=[df_coefs['coef'] - df_coefs['lower_ci'], df_coefs['upper_ci'] - df_coefs['coef']], fmt='o')
plt.axhline(y=0, color='grey', linestyle='--')
plt.xlabel('Coefficient')
plt.ylabel('Estimate')
# plt.title('Coefficient Estimates with 95% Confidence Intervals')
plt.xticks(rotation=45, ha='right', fontsize=10)
plt.tight_layout()

# Add significance markers
for i, (coef, marker) in enumerate(zip(df_coefs['coef'], df_coefs['marker'])):
    plt.text(i, coef+1, f'{marker}', fontsize=22, ha='center', va='bottom')

plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_34.png]]

*** Performance ~ sign distractor overlaps

#+begin_src ipython
df_dist['sign_overlaps_MD_ED'] = df_dist['overlaps_MD_ED'].apply(lambda x: (np.sign(x) + 1 ) / 2)
print(df_dist.sign_overlaps_MD_ED.unique())
formula = 'performance ~ day * sign_overlaps_MD_ED + ( 1 + day | mouse)'
data = df_dist[['overlaps_MD_ED', 'sign_overlaps_MD_ED', 'performance', 'mouse', 'day']]
data = data[data.mouse != 'JawsM18']
#+end_src

#+RESULTS:
: [0.5 1.  0. ]

#+begin_src ipython
from rpy2.robjects import r
from rpy2.robjects.packages import importr
from rpy2.robjects import pandas2ri
pandas2ri.activate()

lme4 = importr('lme4')

# Convert dataframe to R dataframe
r_dataframe = pandas2ri.py2rpy(data)

# Fit the model
formula = 'performance ~ day * sign_overlaps_MD_ED + (1 + day| mouse)'
glm = lme4.glmer(formula, data=r_dataframe, family='binomial') ;
#+end_src

#+RESULTS:

#+begin_src ipython
summary = ro.r.summary(glm)
print(summary)
#+end_src

#+RESULTS:
#+begin_example
Generalized linear mixed model fit by maximum likelihood (Laplace
  Approximation) [glmerMod]
 Family: binomial  ( logit )
Formula: performance ~ day * sign_overlaps_MD_ED + (1 + day | mouse)
   Data: structure(list(overlaps_MD_ED = c(0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0837353030570425,
0.212510176454784, -0.154433580505455, -0.221472064881709, -0.0903595309109119,
-0.240489628501322, -0.114491508401871, 0.0451284694066626, -0.170236819163698,
-0.361743892082492, 0.0199951183017847, -0.112017089501568, -0.202521002723518,
0.0574337806511121, -0.0155644693607952, -0.00325177961032251,
-0.0455851321985731, -0.131439288536972, 0.0233914327451489,
0.675223463678356, -0.0134393693192311, 0.362865965295524, 0.210956448157809,
-0.0106053111769523, -0.0241158987169008, -0.105789852379436,
0.00376668306399192, 0.38999579159502, -0.0422417232303589, 0.000832620088687181,
-0.0535099376901505, -0.0830823416668341, -0.235485025380064,
-0.297555110173627, -0.120261972977106, -0.153855985045248, 0.206350964893931,
-0.109942933792607, -0.169926378331714, 0.0569111394821773, -0.366628795181994,
0.193911740849774, 0.0334426348426055, -0.440016517550647, -0.312139466017499,
-0.0760667050994164, -0.288916823313316, 0.0306516288917436,
-0.125219625838379, -0.0412030381287793, 0.0994064356477432,
-0.14059877260772, 0.0635449443860439, -0.116875696736497, 0.0466013068300301,
-0.0183509561591434, 0.0206672729697104, -0.017903365221948,
-0.0267483841548993, 0.0849309499648779, 0.0323204178114408,
-0.0678727616417212, 0.171624279500171, 0.294201623812442, 0.0699624981829862,
0.100794479843366, -0.0570292090757357, -0.1483507806864, -0.0586174014373683,
0.0164129160832781, 0.0385434483560577, -0.10932102059419, -0.154781657673277,
0.102237265261127, -0.147772585454491, 0.148370031885183, -0.22130786752896,
-0.0660035853800352, 0.0144045945659346, -0.0458057497059115,
-0.0393951522074228, 0.100908815071584, 0.0246093374809539, -0.173139346152505,
-0.180359864696697, -0.0173090811503655, -0.00701726589070806,
-0.11754286031267, 0.157451805150723, -0.201000592634494, 0.0238267638413137,
-0.245791425337031, -0.032734761285454, 0.0152023431572135, 0.0943284714573326,
-0.0202990943620698, 0.187605534975171, -0.330701129357681, 0.0153883005074001,
-0.0389565746183483, -0.00763211106586488, -0.0802655617804155,
-0.232933566281452, -0.0562105535618251, 0.112581854451594, -0.00727742877113885,
-0.00218364322665884, -0.0646977816813203, 0.065048314823027,
-0.00350011893931855, -0.0877955962487397, -0.0597899693081366,
0.0467906333892888, 0.435891415168713, 0.110792434123994, 0.0802155901127807,
0.0245392532006511, 0.0189960783715376, 0.0441225752414472, 0.0257726323619339,
-0.14208565309871, 0.0363825057734496, -0.0723679334349083, 0.217409853876244,
-0.022995983371889, 0.00622145202799787, 0.00929143077376326,
-0.0167511554606536, 0.684250541372134, 0.219254655153074, 0.37315989927392,
1.17930537428092, 0.259693020698675, 1.25769088301609, 1.33464923150638,
0.165858120384102, 0.998320091361148, 2.22359488127681, 0.698493621583515,
0.835058406152183, 0.764921892961907, 0.510952692992052, 0.318548414068214,
0.675548155273017, 0.3633589385824, 1.33977832114346, 0.445799543547707,
0.663191981156411, -0.0624789008067172, 0.0158909137364605, 0.279039953734558,
0.445680175192649, 1.40292687482522, 0.596821344413439, 1.47133701502895,
1.19258184114179, 0.386000230815504, 0.834787636738903, 0.828199232693051,
0.384304656737483, 0.560621054536604, 0.45920645206141, 0.140147042352228,
0.548183178226382, 0.282943086410281, 0.339642275471748, 0.0140559515971181,
0.695439122039027, 0.545703832785093, 0.0341531944629665, 0.28628068857713,
0.457545966789171, 0.645864086081142, 1.53253057685125, 1.04023917231943,
0.754091976775229, 0.371363670366488, 0.340593995416868, 0.546355220421344,
0.34316956612166, 0.431715634045677, 1.38536802584068, 0.503936009522985,
-0.0436480590936022, 0.865206802799048, 0.0896543495579762, -0.0470710199695209,
1.20157295447165, 0.451378063928285, -0.132470444021565, 0.268291453779439,
0.332392107371845, 0.42062686788609, 0.736011362545074, 0.33915385567535,
0.867576746913153, 0.0270236619686103, 0.301862354786008, 0.947823347229635,
0.983316454997165, 0.656651068226121, 0.130723370096723, 0.42787090993567,
1.39526486878741, 0.36423210910184, 0.63418967303004, 0.114859526377137,
0.52674166869397, -0.00430834100684702, 0.487015131151418, 0.57587982611656,
0.793633244580461, 0.682878701092479, 0.816970343754778, 0.835428839062757,
0.952149745959892, 0.378925082599195, 0.8044633669332, 1.15094250677701,
0.167580649634137, 0.218247805461441, 0.324520569494058, 0.455847322144936,
0.740200051309919, -0.0881940278375918, 0.445535299814512, 0.504409742726396,
0.345700899630585, 0.444534716358951, 0.68898290687046, 0.582958213123656,
0.884355111719319, 0.606117886126613, 0.131305918178384, 1.20485320934162,
0.557053918301162, 0.766389529190286, 0.501036099664182, 0.919983776663933,
0.247288249271949, -0.0623116154942681, 0.450417155631079, -0.157964536390084,
0.314096064832126, 0.24563669014705, 0.237112478490898, 0.142171364219924,
0.885474052968117, 0.210200279794966, 0.604662325927719, 0.880680548609873,
-0.808741300825643, 0.337561441222767, 0.321707652520261, 0.231431196049499,
0.427697460278831, -0.0484218793289896, -0.300669015463942, 0.516344143637335,
0.49985687338096, 0.275631679166176, 0.216003707979975, 0.853161260316586,
0.122183809647289, 0.734842930748227, 0.315480400692646, 0.941417799741921,
0.159423171489909, 0.694548345694267, 0.286092781931959, 0.788943855315646,
0.117768988762438, 0.0594646929998312, 0.284779657029645, 1.51259752658461,
0.289062943771135, 0.0591348800826842, 0.98625657420225, 0.517639077883239,
0.645329825620261, 0.643976506754339, 0.44930696273836, 0.583201592920568,
1.04050547099787, -0.0293297418048392, 0.0230304544669005, 0.509271597857288,
0.21661845833741, 0.771801161102307, -0.132764927809106, 0.501679556891713,
-0.965865549501575, 0.420220025438529, -0.178290351939849, 0.186678788417147,
0.707924402068837, 0.287997852942914, 0.536551983324927, 0.258057478562209,
0.193762119352037, 0.446638645089254, 0.479409678978526, 0.0910486307701731,
0.522823124789722, 0.491926711083878, 1.38129398056868, 0.731741054848622,
-0.129995682416751, 0.634813351143384, 0.121447564394319, 0.51674413775334,
0.169573864935887, 0.135983387311429, 0.606923467333205, 0.174484495648072,
0.528793664068487, 0.778020799742711, 0.404677358376155, 0.439158365726797,
0.245916750937387, 0.0367998258616076, 0.294013657886192, 0.474376762622939,
0.473523560812354, -0.0765664949642988, 0.782027780654745, -0.0793913538563394,
0.943837562419383, -0.018494191755394, 0.178771999976797, -0.137178530315935,
0.208091988752457, 1.40879128296914, -0.28715852964342, -0.179885583236468,
0.0423508580260292, 0.206247271000656, 0.269098102600547, 0.779107568737321,
0.491785090885932, 0.145612947699467, 1.72090440442849, -0.1108506631278,
0.66786214440301, 0.547688195229866, 0.552159550050297, 0.272574094842057,
0.327918462303124, 0.293550375228309, 1.25016653911558, 0.626702249793412,
-0.184893452155912, 0.549340125363162, 0.289564989291619, 0.316192521392468,
0.267656414584035, 0.613861588106905, 0.816600804536927, 0.556425721735248,
0.13089754501652, 0.198476573892858, 0.512270241882663, 0.476207833087011,
0.525874392462824, 0.48497140915514, 0.0744931337607398, 0.450724848751294,
0.0741891274858248, 0.376087484041725, 0.827670712777101, 0.292570465099207,
1.63542459101239, 0.0469134554569222, 0.1829227205372, 0.00498947985672212,
0.416178690996508, 0.467772542794262, 0.336781561040847, 0.353382623825178,
0.616183263059788, -0.00272754313896539, -0.188825697452168,
0.0683465970508808, 1.1230553018521, -0.0954344954207457, 0.0354624786939696,
0.0338553569209501, 0.249571408015668, 0.317530231155792, 0.290049306376389,
0.0312227623836239, 0.0963344925670072, 0.341953430216563, 0.244674778002982,
0.121510682586389, 0.0997017271581017, 0.052370714035939, 0.0216512726802454,
0.134600762406236, -0.0307934002917233, 0.322957625825212, -0.100752773767574,
-0.0322056476964273, 0.2004233609446, 0.071536842761309, 0.10216558942016,
0.0455927325267485, -0.108549463274799, 1.21102708545369, 0.230666389036072,
0.0320603998778513, 0.104709912171128, -0.0603363438993641, -0.141378550763467,
0.0350950575547643, -0.0372524594165115, -0.217982612590018,
0.195858373435479, -0.099293351805272, 0.61875087368521, -0.130413423734165,
0.511033195642177, -0.0885423803470618, 0.252866416105953, 0.229897199053871,
0.247794366901531, 0.680562395245734, 0.407229740954091, 0.077248468803132,
0.0438341834530803, -0.216918036369643, -0.707038217717492, 0.16189174141931,
0.33321623895786, 0.571225480441312, -0.103946326687128, -0.164210298399867,
0.417160404664483, 0.0107628506272392, 0.408844784996512, -0.203555478262259,
0.210022001151543, -0.00876332097955788, 0.153599740300962, 0.137654972034981,
-0.0268623547226077, -2.33337569172993, 0.144062483042371, -0.134649824548573,
0.502990476505751, -0.839859050298715, -0.0626565643274314, 0.0854810079747026,
0.0845355193182349, 0.0710354185078322, 0.160826716561209, 0.0337506035683966,
-0.0815222859579822, -0.30592207607814, 0.148708552673939, -0.0105150578552316,
-0.195500122017092, 0.194228689986985, -0.0978493869854103, 0.212355298782983,
-0.0250883313928779, -0.124002924508741, 0.0136224168264829,
-0.0615655664597052, 0.113039654232116, -0.327336948913714, 0.13554505517084,
-2.12195586302949, -1.01883496545122, 0.0261509040516134, 0.435100584977928,
-0.0186731128291082, -0.0102666932378028, -0.133046122139457,
-0.0958170928797658, -0.231926936229355, 1.56793061538566, 0.222357321909398,
0.200984864265588, 0.0991977375137836, 0.266632337924006, 0.139385438407361,
0.191335462240558, 0.320067491316784, 0.383126754754609, -0.0741420584375607,
0.128776753286038, -0.227046062668528, 0.0147172978391839, 0.197214733687455,
-0.0375129842973379, -2.15803049628711, 0.482469464060594, 0.334211951598831,
0.060026648676662, 0.0435245514032016, -0.0542889177465446, 0.0794106080930462,
0.634736729995855, 0.190020016671976, -0.211207562535266, -0.105421626059173,
0.112202864837725, 0.0888057674263411, 0.123178334051668, 0.170270359674999,
0.329821304094337, 0.101496730606274, 0.180400062756426, -0.215236952510562,
0.0234986023632589, 0.171261782268384, 0.341875418284781, -0.418563094509622,
0.888413358768528, 0.428460608076491, 0.582070474104683, 0.119558962059113,
-0.277314991769084, 0.322387135114708, 0.0845461217548877, -0.191332504242092,
0.265953417980282, 0.105374840645768, 0.470781888099587, -0.108466351449055,
-0.146292916363334, 0.115733128858323, 0.18856659601722, 0.209411152397081,
0.285942972574353, 0.943399055805853, 0.487846058312608, 0.296383696792847,
-0.0506043273808905, 0.104774138761662, -0.0588079051383576,
-0.316318185117858, 0.558567984172439, -0.149993218823287, 0.269981496806424,
0.10701669873142, -0.250342685329403, 0.25233981387998, 0.233189874196109,
0.535679413143726, 0.239366684407267, -0.170835513029653, 0.0602142688783538,
-0.458153892479971, 0.222069191436062, 0.0603933639599011, -0.0204840991980627,
0.362526538370868, -0.156507659148355, -0.130910561852564, 0.366869013629797,
0.00231907071781772, -0.0491674312718175, 0.128756340090545,
0.402636824161018, 0.375027601278816, 0.227030134233604, 0.218232272535409,
0.097489511612358, 0.0976079945805732, 0.17034633868528, -0.00773567554930457,
0.184364618507228, 0.263899703590328, 0.591847055521962, 0.273306047951606,
0.529563707068682, 0.0247813391205831, -0.168587154505523, 0.225994120512848,
-0.0873212546749869, 0.274496648432043, 0.292297833166393, 0.546371092204352,
-0.219501956405747, 0.514521902196979, 0.546372002740533, 0.360714650204589,
0.155214084077325, -0.105855090754445, 0.764151300508817, 0.629968000636192,
0.230060279924219, 0.294262436544703, 0.261326408660948, 0.0804789980858172,
0.300853068025736, 0.229893227029121, 0.0174063615485578, -0.113006217520355,
0.172565452379923, 0.244309222348087, 0.134196649811825, 0.104185519927695,
0.375322283002494, -0.204581761745884, 0.632435181622335, 0.219113164301391,
0.0366403112009895, -0.033982694909301, 0.0204794216940575, 0.214194887254771,
0.0346848913390874, 0.334457725403561, 0.160337926499723, -0.116255342167391,
0.515000150935067, 0.468748081195468, 0.127822787802447, 0.125594833999905,
0.281143253833163, 0.127197304212154, -0.112974151171906, 0.63121740682109,
0.371228816522147, -0.205899393674799, -0.165025033945864, 0.0480564086314186,
0.137291560347747, 0.279680149515456, -0.252674272955722, 0.30559605927163,
0.629674559797897, 0.252599339854982, 0.445876640349542, 0.116624914737378,
0.217579839667235, 0.833330806099494, 0.198150688405633, 0.511638868226409,
0.542294508722477, 0.391445845535402, 0.0100072040666837, -0.214114529752045,
-0.215318312127294, 0.220901705138344, 0.0258922463638458, -0.367442088296201,
0.0608249340142111, 0.47529337295819, 0.066255192652774, -0.394082836891129,
0.858281328025895, 0.73668949289758, 0.157197908223253, 0.00981110874552245,
0.0579339161062505, 0.288684842282507, 0.355444261611326, -0.000490414711332713,
0.330746753838653, -0.162976117383574, 0.00219936839258549, 0.22122956443774,
0.416651780830352, -0.00547741114635124, -0.100703320863606,
0.194013150812533, 0.857364724977254, 0.463784078055323, -0.0934863588330716,
0.448918872584994, 0.366430533445026, -0.241289938523456, 0.194546288178787,
-0.0800971767574137, 0.0202206715048977, 0.197151114993289, 0.156488544853249,
-0.202362108793134, -0.0213624718149297, 0.0980967018132959,
-0.226604227458704, 0.369084262443381, -0.284153058938255, 0.13265341036764,
-0.137279842538341, 0.806600429867335, 0.971539877970052, -0.115289888896571,
-0.206141430276736, 0.553833688029106, 0.318375120852401, 0.516722039776579,
0.116273707990673, 0.438653681563509, 0.74674949828011, -0.148379866778496,
0.0934690762483074, 0.112914759813991, 0.172931814855981, 0.0331079589959357,
0.0210171150818776, 0.0246006284130892, -0.0252490714654578,
0.292933923414732, 0.229449549034896, 0.191031940822057, -0.0138058288524085,
0.0631329598799235, 0.502904951660382, -0.156473135344543, 0.203417479584929,
0.414420526181631, -0.330569733306721, 0.535323934789706, -0.0153088531693109,
0.126385635603945, -0.0176100610732448, 0.241487500391963, 0.0504553076308737,
0.617289141236274, 0.381458928990427, -0.0716916141296035, 0.133973949670178,
0.81043100307124, -0.00731717052974295, 0.283817163619057, 0.147867418045896,
0.372382058968571, 0.64424064994489, 0.0994749245366658, 0.292708091036541,
-0.234021116656, 0.917731959746167, 0.281899488602933, 0.0154168910233805,
-0.0525311579217272, 0.302239671756407, 0.470485252502654, 0.0631874939964137,
0.355077100516874, -0.000520398752713379, 0.392680233873351,
-0.230150314733747, -0.329682639431587, 0.15344189761935, -0.0450657622990832,
0.587487039390035, 0.677729384409427, 0.401990654739371, 0.317040875892776,
0.0766908371318798, 0.398815619756083, 0.0755468396108362, 0.267307264597065,
0.0850312355234715, -0.155978431497339, 0.34637815274375, 0.324715795653124,
0.109482965293229, 0.261580930650273, 0.176401896003032, -0.152876713771973,
0.434705993269397, 0.241500745861014, 0.00927343639760535, 0.00216884763510485,
-0.0385965817270412, 0.0410621295680542, -0.0650822957369001,
0.0460367624394909, 0.132113404888234, 0.195899857964968, -0.0282498802101524,
0.0544453908241879, 0.0942091916987417, 0.465593747125851, 0.0019305435873138,
0.108686484812615, 0.184978999803951, 0.285814611335344, 0.1733671704098,
0.069222509805618, 0.0528585226867905, 0.371326745616356, -0.368094489211485,
0.392214795588859, 0.379642746229541, 0.158136143806528, 0.0416688136500206,
0.128834285084569, -0.0583462099047444, 0.668846996894174, 0.367292817297113,
0.256223456475736, 0.0576172767868494, -0.011673612188445, 0.0089412176541026,
0.0499403336441898, 0.0189860636808578, -0.0347649238925616,
0.263727404968681, 0.712298153458183, 0.828241736893068, 0.0126943499061001,
0.0224695438704804, 0.0785216436533285, 0.520879322689501, -0.0279483204100602,
0.320794288892934, 0.0861245916150269, 0.301618675318391, 0.394902616415596,
0.533293228857349, 0.524925998029069, 0.000658265918287359, -0.204169568521686,
-0.114972207113213, -0.0251806203672356, 0.849697748976752, -0.0992660760092667,
0.510066409256897, 0.245509752917127, 0.510318739483653, -0.0355701256269914,
-0.509387618733768, 0.31716512972381, 0.34860631676982, 0.140797030170446,
0.172127775054533, 0.0175925018101009, 0.152129676047872, 0.45520176514851,
0.299091715803611, 0.0771673286291413, 0.574723121767001, 0.000493131335738325,
0.0643580660786591, 0.147362289396936, 0.0316630925114624, 0.206605291987611,
0.231989417396852, 0.204289564071657, -0.40877080457157, -0.132160391889076,
0.02345434201292, 0.2104928336301, 0.203694966415828, 0.103177570372312,
-0.0179169007537745, 0.521212447721572, -0.113131086186706, -0.0165882558028088,
0.481722374233798, 0.0463094810930856, 0.0150949609160142, 0.102251056648284,
0.198754154357938, 0.123931067513517, 0.24703796017118, -0.118313541390535,
0.0502412143995781, 0.309867645312646, 0.0880290787899549, 0.191131933517482,
0.599556782824915, 0.534107070073021, 0.0949434195822844, 0.0392431584994338,
0.0542816014712315, -0.143860919366838, 0.0218911382278256, -0.119740252790514,
0.748660176072402, 0.0497556450210357, 0.0698985430428491, 0.120698107546654,
0.1830088948962, 0.0149540607894634, 0.126319905974165, 0.336921093004486,
0.0601892450012505, -0.00333175794771044, 0.0562878919164029,
0.054113885610743, 0.761221297204869, -0.234171874960662, 0.195336906855855,
0.113067957497122, -0.0370626620895499, -0.0764373020936126,
-0.00334856152143907, -0.102408306528624, 0.0248917676869793,
-0.00940747672260481, -0.0439858143472409, -0.0413628699295095,
0.352053422352069, -0.271915238736818, -0.0999854413942838, -0.0533005886194476,
0.0497484427920321, -0.062624279688169, 0.653152754451694, -0.0598497750883995,
0.725773507153787, 0.0947324345704979, -0.108763265213508, 0.29466565891601,
0.0397943821814934, 0.0939965627029408, 0.10296202518497, -0.00365885625245107,
0.0054202937702953, -0.21952934984574, -0.0616397278859718, 0.0505610306650386,
0.0647228808632846, -0.05339895010554, 0.921292130260537, 0.391160683749679,
0.0695514027062837, 0.304934034228113, 0.355499084266802, 0.941135882883167,
0.134487938418322, -0.156231152508457, -0.0786843445562692, 1.12026607491431,
0.34608790530201, 0.0775082880789141, 0.0336863644791201, 0.668178475162032,
0.116508065083655, 0.0148051639343533, 0.487948331817708, 0.0232833066990925,
-0.171872188292533, -0.0233448454530818, 0.619112446552682, 0.116170227237151,
-0.0731007391126806, 0.169093726628489, 0.0343493489616658, 0.571305069711735,
0.702842456834093, 0.629993850012371, 0.0782622816828358, 0.191023916562045,
0.116459110516008, -0.136114583234522, 0.511866415833896, 0.537763921650918,
0.577598813241162, 0.406599933307603, -0.189683332826265, 0.927398765670201,
-0.0135721880720359, -0.191133365663799, -0.0518396350064241,
-0.00308462036825512, 0.0322742288163664, 0.532555677147452,
0.708341683022439, 0.204785617489868, 0.188795660854296, 0.0119811179766178,
0.0960999347794759, -0.0973774509580506, -1.36299816605161, -0.0880187272444795,
0.0909258271983527, -0.00191126176223602, 0.0652525821859373,
0.162615931153341, 0.0729822168337289, 0.0904235312099286, 0.0966637817337922,
0.158754781887607, 0.04852709009269, -0.268167356387493, -0.0355606389182693,
0.0112096188940971, 0.733243032287698, -0.422013666525699, 0.0615220195705391,
0.0285791639263074, 0.0137917912795714, -0.0133148440788863,
0.819029673267573, 0.711476900133762, -0.0684221205591185, -0.00288322141893907,
0.454202380052445, 0.998917811661032, 0.88355073737749, 0.265601721959608,
0.00588288542478819, 0.020780361341879, 0.072299593165892, -0.0552205569137198,
-0.0651004676607989, 0.852851555316113, 0.119460515577628, -0.485583981384202,
-0.218109474697465, 1.2056820588526, 0.0601426445680148, 0.196415058410562,
0.0502191510916104, 0.55401232367931, -0.101041186938009, -0.0411388346954069,
0.0627825862739486, 0.675554697683106, 0.116022681634268, 0.71618291317789,
0.0923067038729358, -0.0558190143354438, -0.07489097933189, -0.0326951845417837,
0.21708388896805, 0.102457457919552, 0.0508731790588204, -0.00489952500231226,
0.012261541825612, 0.0774666114706474, -0.202110392057584, 0.213432053477069,
0.360797926168064, 0.19871546469846, -0.0512879505056991, 0.13456219643821,
-0.175892512082167, 0.0551711456131362, 0.142909171997934, 0.00188165881604453,
-0.220787640085658, 0.690097887965318, 0.189717462024999, 1.13956683971526,
0.248941752702826, 2.20375639935794, 0.160066969911953, 0.0086076526067711,
-0.188471586918026, 0.10480028812758, 0.0953067529757758, 0.141908116722977,
0.315286424991699, -0.296153937037465, -0.0464053144922076, 0.368956523683731,
-0.0882768033131092, 2.71737996850026, 0.249191933596861, -0.167234345258099,
0.107496469064965, 0.0878167119143755, 0.259109268247132, 0.517921467653843,
0.237323077175811, 0.304950865226724, -0.23057792448326, 0.297025649788824,
0.160837856537691, 0.0347875341559858, -0.368666490475481, 0.414867766634357,
-0.333379955250794, 0.436275110394723, 0.693256702994439, 0.20145856349276,
0.0425361904227597, -0.185349612810192, 0.253168732956874, 0.15554473803124,
-0.0555059799190804, 0.31898085416951, 0.221477624914922, 0.302740072333666,
0.231157615264285, 0.0506139481967871, 0.160684594102697, -0.059909713118725,
-0.00293586255592984, -0.109248326194557, -0.0579989303768512,
0.100034657389927, 0.21656584090982, 0.0450464913016948, 0.0097875721082208,
0.113863808819583, 0.174957212938788, 0.0858148451501574, 0.074610470522004,
0.428186204538718, 0.0784002951325002, -0.0456763684688652, 0.0600912821116374,
0.323085261347105, 0.385360747365861, -0.0883514924890239, -0.0449905655534405,
0.248725153720743, 0.00481461238884255, 0.031837560258238, 0.158522951261587,
-0.0325111770455665, -0.0115309861441356, 0.0220066858423771,
0.126887503178046, 0.575285291289785, -0.22139951215867, -0.0515931542796417,
0.0612595031118616, 0.843539897162183, 0.0646741259435494, 0.117361357409144,
-0.0553982123679015, -0.369577341372211, 3.6059207256998, 0.0579832382164776,
0.0566661533999569, -0.246967594710514, 0.181750129709892, 0.161543386068437,
0.283035363620855, 0.257236793413137, 0.423329171667797, 0.032561586763362,
0.103557533250804, 0.0959704304265247, 0.0864286133879061, 2.76800375347316,
0.634768577826346, 0.515252331794174, -0.306179844854146, 0.102569195344397,
0.0379594899104317, -0.150148645165207, 0.0942957115913939, 0.2383096691904,
0.118901748902759, 0.20819031462994, -0.0967645824321828, -0.0275296767724723,
0.031477815044438, 0.0674865640362539, 0.188192310038065, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0.31588544873168, -0.521280079367375, 0.0309032973030715,
0.219891876424715, 0.176919860501602, 0.194824362815623, 0.269215183467211,
0.212551875143517, 0.0599400241634191, 0.116008540560821, 0.0332839879642008,
0.128538564089396, 0.132706910506292, 0.111800168579273, -0.0203112155725498,
-0.0938278546159368, -0.130388223929492, 0.417617916688341, 0.465114600025228,
0.0301280448454933, -0.106600771396927, -0.063152550396818, -0.00971137155682322,
0.0739849376342911, 0.135750001755334, 0.171161119913622, -0.0892252236569047,
0.273994724424732, 0.0270097358398714, -0.0170207184474397, -0.144955056682259,
0.322084855343851, -0.018142636718224, 0.294060545094355, -0.163712617528892,
0.0107854101138748, -0.149203902902929, 0.128544060045112, -0.158017773414859,
0.065482044233237, -0.054325694322219, -0.174301144882355, -0.167085535286316,
-0.109778599257418, -0.0759282503000942, -0.0708161013240444,
0.179585683673227, -0.0303819190704537, 0.0717291562058107, 0.145747315102785,
0.0846264195626115, 0.23382622182503, -0.38097764175799, 0.112527165693311,
-0.0309759151403125, -0.0373326717098376, -0.0178914567721388,
-0.161932472474409, 0.268381712797292, 0.0552477498477446, 0.246718238691116,
-0.0892574249710506, 0.185820770975214, -0.162449900543514, 0.0812513269549309,
-0.225712925047624, 0.127080350049474, 0.167883934017647, 0.0171073257435199,
-0.0190492055296963, -0.0817900011938602, 0.00767498701356305,
0.142381582419271, -0.0230016463238539, 0.121633405640877, -0.114546337247243,
0.0276429605632331, 0.292536672854551, -0.0351829370063801, 0.030183569128343,
0.16328171270544, -0.0675479460910046, 0.0437416219910417, 0.0308876947212739,
-0.109335278029719, -0.0192582470211607, -0.101073204160858,
0.230779274094561, 0.0789958019289635, 0.210654424941572, -0.122451695466774,
-0.084011050305775, 0.0234891545261481, -0.0275035381806984,
0.0123546992992737, 0.180533138527062, 0.060428864680719, -0.0307225698783521,
0.481157796017987, -0.135012454363519, -0.0679865340324905, 0.114057815426612,
0.243274230855138, 0.148640625936346, -0.183151098597716, -0.0658968368037867,
0.288066151500141, 0.297653634631241, -0.0510003238444311, -0.0215441256305067,
-0.359185515774428, 0.258197048083279, 0.265843824656719, -0.03747854673423,
-0.0295140690832898, -0.154612665411155, -0.0475109397278581,
-0.00762756316795708, -0.0905151999871197, -0.0966852754075229,
0.201166394343504, -0.182287991060763, 0.140729728060324, -0.120687729702712,
0.2354255413709, 0.210788921342295, 0.162772637231101, 0.156651758901781,
0.426928433573815, 0.170236721803589, 0.328981137378415, 0.0223301200629535,
0.161594427322385, -0.0383486864738302, 0.257492382130666, -0.103537081007542,
-0.11888892251956, 0.0473838901087391, 0.294721488994825, 0.253316167424529,
0.154620038493277, 0.297612120533891, -0.0625137439902635, 0.0719001572494593,
0.15746527952386, -0.0571142111659635, 0.170354943148027, -0.0433205973389971,
0.0117326940555138, 0.228441733192977, 0.0703122666805161, -0.0572645645916955,
-0.0746908296220662, 0.0189393638060805, -0.104467064092442,
0.048672898620619, 0.219897003979586, 0.0851738262782488, 0.241394953656911,
0.0782674288322597, 0.0830525050830824, 0.215420038042249, 0.151910975176793,
0.147591502241492, 0.220831867912774, 0.386989532538144, 0.139273426601319,
0.425515987632003, -0.0569611239552589, 0.00213662775857306,
0.183055929005737, 0.0452302841902709, -0.343809461326851, 0.106394867130427,
0.118172806746099, -0.161996416790647, -0.0230509773289136, 0.161880893004651,
0.302846722030061, -0.221504858345608, -0.0326285815831287, 0.0308657670871976,
-0.0132054124573889, 0.0181645213556805, 0.0248195712914549,
-0.239911031942485, 0.145571197618788, -0.189911228345064, 0.265125248410606,
0.207892552070978, -0.202746332050747, 0.345469644315826, 0.269464452259732,
0.190486228519731, -0.109870388409261, -0.166869327391172, 0.107628471093431,
0.164439706139739, -0.0534936280953105, -0.0253520674094706,
0.151951006529067, -0.071700932566698, 0.0391162806484421, 0.0796202905838,
-0.0374602244803929, -0.0789114809305619, 0.339319043435313,
-0.0476341937028353, 0.159239029120345, -0.0383992353922262,
0.128319752988841, -0.0104205023539944, 0.111502195726776, 0.0959200811221573,
-0.0108479545178014, -0.0511193663042218, 0.0399893599136031,
0.0904911595590561, -0.0837730152169116, 0.287706494935361, 0.124043771985661,
0.276259932769709, -0.288364845483941, -0.00870263075655514,
0.406165753762484, 0.0676398939691971, 0.0979778955362941, 0.0704470059858463,
-0.28223143067757, 0.0955080179175067, 0.051601651574821, 0.203507332810916,
0.113307529642071, 0.099454180977067, 0.132648079124806, 0.156329112162542,
-0.0612582955717263, 0.0903275362737644, 0.0263986590819283,
-0.0275848556428157, 0.479871086432636, 0.00504211519408468,
0.58682965962648, -0.148193243201964, 0.520156469876088, 0.175283428582705,
-0.0015376600769216, 0.410768357936628, -0.0777444742088644,
-0.0404376599886478, 0.00294854714842772, 0.0942395655022986,
-0.0554038653527754, 0.424911902725352, 0.108969767166279, 0.319519285696571,
0.221445858841614, 0.026908424433331, 0.323859697962125, 0.440587025220568,
0.55134942822378, 0.37995926651673, -0.388321882967577, -0.015267750758176,
0.143629628202148, -0.0303515077584795, 0.0219131427740951, -0.832722952127646,
-0.0491774952574798, -0.0287865132692016, 0.312033512076399,
-0.0159626449324241, 0.190013232909331, -0.0901325309025884,
-0.296400648430446, -0.260564350513853, 0.28499582536947, -0.0628153453018007,
0.0818863987777389, 0.0238226465746819, -0.2681195618474, -0.276654381752101,
-0.111567999500421, 0.180885364144886, 0.165347729939738, 0.0842863136423972,
0.210818850942393, 0.274341416731894, 0.293306715868181, 0.396733252854909,
-0.2523960894138, 0.571043861154187, 0.180602929287415, 0.0769495838429852,
-0.135235572493704, -0.425132353059189, -0.354392254770629, -0.219111120110843,
0.160047713129678, -0.212303322935605, 0.283367890778345, 0.150651010942454,
0.0294094292390255, 0.420586843135858, 0.293566419468118, 0.319083105381186,
0.377954846888185, 0.103805809278974, 0.278076665452829, 0.203825908097351,
0.00926941906806796, 0.157352628863127, -0.270155970309969, -0.226277590109844,
0.0361052194801743, 0.512627857245909, -0.392235619555872, 0.219118434247538,
0.35294388343735, -0.0576814897740592, 0.111449876793518, 0.22147299218387,
0.463095972362918, -0.0454240809198119, 0.0715079452748245, -0.2572366410534,
0.0283917758942596, 0.196671873127563, -0.0727361875412319, 0.0056106259471293,
-0.402429641370361, -0.325960457173372, 0.160620468123543, 0.0616001095963915,
-0.026888824528573, -0.38208488219533, 0.179052964789273, -0.127320676019492,
0.148960277053457, -0.156600746033241, -0.157557474738842, -0.127353248623973,
0.135595042772971, -0.441010068527311, -0.154576101049325, -0.154212899092812,
0.811431338650025, -0.136842518408669, -0.603017468617208, 0.252637645496532,
-0.459724131127055, 0.18834253468062, 0.0859107511288398, 0.366152374992397,
-0.0418391146618445, 0.0076871770187088, 0.0728086119993187,
-0.178725494121946, -0.262440727353012, 0.167058052241166, -0.0344877828970865,
0.450840190825859, 0.0358294885666764, 0.151378520750251, 0.347749937799112,
-0.0731375860477429, -0.618839553409148, 0.0511912100918238,
0.367348795818753, 0.847188221593385, 0.0807792959591282, 0.151816548729295,
-0.265977401663815, -0.194940865399268, -0.350190490216437, 0.127755464375343,
-0.630420563960306, -0.293614057860184, 0.0189719689786415, 0.468173659853808,
-0.656280597407906, -0.0751717261333222, -0.302149533376897,
-0.111469157037784), sign_overlaps_MD_ED = c(0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,
0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,
1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0,
1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0,
1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1,
1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1,
1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1,
1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0,
1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1,
1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0,
1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0,
1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1,
1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0,
1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,
1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0,
1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0,
0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1,
1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,
1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,
1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1,
1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1,
1, 0, 0, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,
0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1,
0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,
0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0,
0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1,
1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1,
1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0,
1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1,
1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,
0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0,
1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1,
0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0,
1, 1, 0, 0, 0, 0), performance = c(0L, 1L, 1L, 0L, 0L, 0L, 1L,
1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 1L,
1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L,
1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L,
1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L,
1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L,
0L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 0L, 1L, 1L,
0L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L,
0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L,
1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 0L,
1L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L,
0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L,
0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L,
1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 0L,
1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L,
0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L,
0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 1L,
1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L,
1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L,
1L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L,
0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L,
1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L,
0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L,
0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 1L,
0L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L,
0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L,
1L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L,
0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 1L,
1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L,
1L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
0L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L,
1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L, 0L,
0L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L,
0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 1L,
1L, 0L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 1L, 1L, 0L,
1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 0L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L,
1L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 0L,
0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 0L,
1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L,
0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L,
1L, 1L, 1L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L, 1L,
1L, 0L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L,
0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 0L, 1L,
1L, 0L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
0L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L,
0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L,
1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L,
1L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L,
1L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 0L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 0L, 0L, 1L, 0L,
0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 0L, 0L, 1L, 1L,
1L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 1L,
0L, 0L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 1L,
1L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 0L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L,
1L, 1L, 1L, 0L, 1L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 1L, 1L, 0L, 1L,
1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L,
1L, 1L, 1L, 0L, 0L, 1L, 0L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L,
0L, 1L, 1L, 1L, 0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L, 0L,
0L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 0L, 1L, 1L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L), mouse = c("ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04", "ChRM04",
"ChRM04", "ChRM04", "ChRM04", "ChRM04", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15", "JawsM15",
"JawsM15", "JawsM15", "JawsM15", "JawsM15", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03", "ACCM03",
"ACCM03", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04", "ACCM04",
"ACCM04", "ACCM04", "ACCM04", "ACCM04"), day = c("first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "first", "first", "first",
"first", "first", "first", "first", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "middle", "middle", "middle", "middle", "middle", "middle",
"middle", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last", "last", "last", "last", "last", "last", "last", "last",
"last")), class = "data.frame", row.names = c(NA, -2048L))

     AIC      BIC   logLik deviance df.resid
  2248.6   2316.1  -1112.3   2224.6     2036

Scaled residuals:
    Min      1Q  Median      3Q     Max
-3.2979 -1.0939  0.4426  0.6648  0.9142

Random effects:
 Groups Name        Variance Std.Dev. Corr
 mouse  (Intercept) 0.12453  0.3529
        daylast     0.13736  0.3706   -0.45
        daymiddle   0.09284  0.3047    0.80  0.18
Number of obs: 2048, groups:  mouse, 4

Fixed effects:
                              Estimate Std. Error z value Pr(>|z|)
(Intercept)                     0.6151     0.2541   2.421  0.01547 *
daylast                         0.9247     0.3205   2.885  0.00391 **
daymiddle                       0.7348     0.2896   2.537  0.01117 *
sign_overlaps_MD_ED            -0.1589     0.2481  -0.640  0.52186
daylast:sign_overlaps_MD_ED     0.6514     0.3591   1.814  0.06965 .
daymiddle:sign_overlaps_MD_ED   0.3464     0.3107   1.115  0.26484
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Correlation of Fixed Effects:
            (Intr) daylst dymddl s__MD_ dyl:__MD_ED
daylast     -0.592
daymiddle   -0.146  0.402
sgn_v_MD_ED -0.644  0.515  0.543
dyl:__MD_ED  0.447 -0.654 -0.379 -0.698
dym:__MD_ED  0.493 -0.398 -0.710 -0.767  0.540
optimizer (Nelder_Mead) convergence code: 0 (OK)
boundary (singular) fit: see help('isSingular')
#+end_example

#+begin_src ipython
labels = ['(Intercept)',
    'daylast',
    'daymiddle',
    'sign_overlaps_MD_ED',
    'daylast:sign_overlaps_MD_ED',
    'daymiddle:sign_overlaps_MD_ED']
#+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt
from rpy2.robjects import pandas2ri
import rpy2.robjects as ro

pandas2ri.activate()

# Extract model summary
summary = ro.r.summary(glm)
coefs = np.array(summary.rx2('coefficients'))

# Extract coefficient estimates and confidence intervals
estimates = coefs[:,0]
stderr = coefs[:,1]
p_values = coefs[:, 3]
ci_low = estimates - 1.96 * stderr
ci_high = estimates + 1.96 * stderr

# Labels for the coefficients
# labels = summary.rx2('coefficients').rownames

# Plotting
plt.figure(figsize=(8, 6))
plt.errorbar(range(len(estimates)), estimates, yerr=[estimates - ci_low, ci_high - estimates], fmt='o')
plt.axhline(0, color='gray', linestyle='--')
plt.xticks(np.arange(len(labels)), labels, rotation=45, ha='right', fontsize=10)
plt.xlabel('Coefficients')
plt.ylabel('Estimate')
# plt.title('Coefficients with 95% Confidence Intervals')
for i, (est, ci_l, ci_h, p) in enumerate(zip(estimates, ci_low, ci_high, p_values)):
    significance = significance_marker(p)
    plt.text(i, ci_h + 0.05, significance, ha='center', va='bottom', color='red', fontsize=20)

plt.tight_layout()
plt.show()
#+end_src

#+RESULTS:
[[./figures/overlaps/figure_39.png]]

#+begin_src ipython

#+end_src
