# -*- org-image-actual-width: nil; -*-
#+TITLE: Paper Outline
##+PROPERTY: header-args:ipython :results raw drawer :exports both :async t :session dual_data :kernel dual_data

* A few imports
#+begin_src ipython :results output :async t :session dual_data :kernel dual_data
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload

# Out[1]:

#+begin_src ipython :results output :async t :session dual_data :kernel dual_data
  import os
  import sys

  sys.path.insert(0, '../dual_task')
  current_dir = os.path.dirname(os.path.abspath('__file__'))
  # Get parent directory (= the project root)
  project_root = os.path.join(current_dir, '..')
  # Append to system path
  sys.path.append(project_root)

  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

#+begin_src ipython :results output :async t :session dual_data :kernel dual_data
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  from dual_data.common.fig_grid import create_grid

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6

  matplotlib.rcParams['figure.figsize'] = [width, width * golden_ratio ]
  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:

#+begin_src ipython :results raw drawer :exports both :async t :session dual_data
  print('a test figure')
  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  plt.show()
#+end_src

#+RESULTS:
:results:
# Out[10]:
[[file:./obipy-resources/zVhEzm.png]]
:end:

* Figure 1
* Figure 2
** Analysis
**** imports
#+begin_src ipython :results raw drawer :exports both :async t :session dual_data :kernel dual_data
  from dual_data.decode.mne_scores import run_mne_scores
  from dual_data.decode.mne_cross_temp import run_mne_cross_temp
#+end_src

#+RESULTS:
:results:
# Out[74]:
:end:
**** parameters
#+begin_src ipython :results raw drawer :exports both :async t :session dual_data
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  # kwargs = {'features':'sample', 'bootstrap':0, 'prescreen':'fpr', 'pval':0.15}
  kwargs = {'features':'sample', 'bootstrap':0, 'prescreen': 0, 'pval':0.05, 'trial':'correct'}
#+end_src

#+RESULTS:
:results:
# Out[75]:
:end:
**** run
#+begin_src ipython :results raw drawer :exports both :async t :session dual_data

    for mouse in mice:
        for task in tasks:
            for day in ['first', 'last']:
                run_mne_cross_temp(mouse=mouse, task=task, day=day, **kwargs)
                plt.close('all')
#+end_src

#+RESULTS:
:results:
# Out[76]:
[[file:./obipy-resources/dsyT0K.png]]
:end:

** Figure
*** generate
#+begin_src ipython :results raw drawer :exports both :async t :session dual_data :kernel dual_data

  def figname(task, day):
    return "JawsM15_sample_cross_temp_score_" + task + "_" + day + ".svg"

  figlist = ['../figs/' + figname(task, day) for day in days for task in tasks]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "fig_final.svg", dim=[3,2])

  #+end_src

  #+RESULTS:
  :results:
  # Out[77]:
  :end:

*** show
#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:./fig_final.svg]]
