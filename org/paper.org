#+TITLE: Paper Outline
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session src.:kernel dual_data

* A few imports
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload

# Out[1]:

#+begin_src ipython
  import os
  import sys

  sys.path.insert(0, '../dual_task')
  current_dir = os.path.dirname(os.path.abspath('__file__'))
  # Get parent directory (= the project root)
  project_root = os.path.join(current_dir, '..')
  # Append to system path
  sys.path.append(project_root)

  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/src.bin/python

#+begin_src ipython
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  from src.common.fig_grid import create_grid

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6

  matplotlib.rcParams['figure.figsize'] = [width, width * golden_ratio ]
  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:

#+begin_src ipython
  print('a test figure')
  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  1+1

#+end_src

#+RESULTS:
:RESULTS:
: a test figure
: 2
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
:END:

* TODO Figure 1
* DONE Figure 2
** Cross Temporal Decoding Analysis
*** imports
#+begin_src ipython
  from src.decode.mne_cross_temp import run_mne_cross_temp
#+end_src

#+RESULTS:
:results:
# Out[3]:
:end:

*** parameters
#+begin_src ipython
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  # kwargs = {'features':'sample', 'bootstrap':0, 'prescreen':'fpr', 'pval':0.15}
  kwargs = {'features':'sample', 'bootstrap':0, 'prescreen': 0, 'pval':0.05, 'trial':'correct'}
#+end_src

#+RESULTS:
:results:
# Out[75]:
:end:
*** Run
#+begin_src ipython

    for mouse in mice:
        for task in tasks:
            for day in ['first', 'last']:
                run_mne_cross_temp(mouse=mouse, task=task, day=day, **kwargs);
                plt.close('all')
#+end_src

#+RESULTS:
:results:
# Out[76]:
[[file:./obipy-resources/dsyT0K.png]]
:end:

** Figure
*** generate
#+begin_src ipython

  def figname(task, day):
    return "JawsM15_sample_cross_temp_score_" + task + "_" + day + ".svg"

  figlist = ['../figs/' + figname(task, day) for day in days for task in tasks]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "fig_final.svg", dim=[3,2])

  #+end_src

  #+RESULTS:
  :results:
  # Out[77]:
  :end:

*** show
#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:./fig_final.svg]]

** Methods
add methods here
* Figure 3
** Temporal Decoding Analysis
*** Imports
#+begin_src ipython
  from src.decode.mne_scores import run_mne_scores
#+end_src

#+RESULTS:

*** Parameters
#+begin_src ipython
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  kwargs = {'bootstrap':0,
            'prescreen': None, 'pval':0.05,
            'trials':'correct', 'balance':1,
            'method':None,
            'clf':'SVM', 'scaler':None,
            'out_fold':'repeated', 'n_repeats':10,
           }
  plt.close('all')
#+end_src

#+RESULTS:
*** Run

#+begin_src ipython
  for mouse in mice:
      for task in ['DPA', 'DualGo', 'DualNoGo']:
          for day in ['first', 'last']:
              print(task, day)
              run_mne_scores(mouse=mouse, task=task, day=day, **kwargs);
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DPA TRIALS correct DAYS first LASER 0
  ##########################################
  multiple days
  X_S1 (35, 693, 84) X_S2 (35, 693, 84)
  n_max 35
  X (70, 693, 84) y (70,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=7623)
  --- 0:01:37.603003 ---
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DPA TRIALS correct DAYS last LASER 0
  ##########################################
  multiple days
  X_S1 (45, 693, 84) X_S2 (44, 693, 84)
  n_max 44
  X (88, 693, 84) y (88,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=8959)
  --- 0:01:39.186040 ---
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DualGo TRIALS correct DAYS first LASER 0
  ##########################################
  multiple days
  X_S1 (27, 693, 84) X_S2 (28, 693, 84)
  n_max 27
  X (54, 693, 84) y (54,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=1953)
  --- 0:01:21.884170 ---
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DualGo TRIALS correct DAYS last LASER 0
  ##########################################
  multiple days
  X_S1 (38, 693, 84) X_S2 (40, 693, 84)
  n_max 38
  X (76, 693, 84) y (76,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=9458)
  --- 0:01:44.658615 ---
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DualNoGo TRIALS correct DAYS first LASER 0
  ##########################################
  multiple days
  X_S1 (33, 693, 84) X_S2 (37, 693, 84)
  n_max 33
  X (66, 693, 84) y (66,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=8886)
  --- 0:01:31.433207 ---
  loading files from /home/leon/dual_task/src./data/JawsM15
  ##########################################
  MODEL: SCALER None IMBALANCE False PRESCREEN None PCA False METHOD None FOLDS stratified CLF SVM
  ##########################################
  DATA: FEATURES sample TASK DualNoGo TRIALS correct DAYS last LASER 0
  ##########################################
  multiple days
  X_S1 (41, 693, 84) X_S2 (41, 693, 84)
  n_max 41
  X (82, 693, 84) y (82,)
  cv RepeatedStratifiedKFold(n_repeats=10, n_splits=5, random_state=9625)
  --- 0:01:46.584015 ---
#+end_example
[[file:./.ob-jupyter/50c835923872df370d50805dc91fd229a316c907.png]]
[[file:./.ob-jupyter/92046e46d837762ceaa8df4d9a4e5946e4c66cd4.png]]
[[file:./.ob-jupyter/afaedae9d5a36c63a5a53afd1b1a8e8113f9e456.png]]
:END:

** Figure
*** generate
#+begin_src ipython

  def figname(mouse, task):
    return mouse + "_sample_score_" + task + ".svg"

  figlist = ['../figs/' + figname(mouse, task) for task in tasks]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "sample_scores.svg", dim=[3,1])

  #+end_src

  #+RESULTS:
  : ['../figs/JawsM15_sample_score_DPA.svg', '../figs/JawsM15_sample_score_DualGo.svg', '../figs/JawsM15_sample_score_DualNoGo.svg']
  : 504.0 311.48913
  : ['1512pt', '311pt']

*** show
#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:./sample_scores.svg]]

* Figure 4
** Overlaps
*** Imports

#+begin_src ipython
  from src.overlap.get_overlap import run_get_overlap
#+end_src

#+RESULTS:
:results:
:end:

*** Sample Overlap
**** Parameters
#+begin_src ipython
        mice = ['JawsM15']
        tasks = ['DPA', 'DualGo', 'DualNoGo']
        days = ['first', 'last']

        kwargs = dict()
        kwargs = {'prescreen': 0, 'pval':0.05, 'trials':'correct', 'balance':0
                  , 'method':'bolasso', 'bolasso_pval':0.05,
                  'scaler':None, 'bootstrap':1,
                  'clf':'SVM',
                  }
#+end_src

#+RESULTS:
: 3f11865f-5f90-4655-89b1-17637cdc8299

**** single mouse

#+begin_src ipython
  mouse = 'JawsM15'
  kwargs['laser']=1
  run_get_overlap(mouse=mouse, features='distractor', task='DualGo', day='first', **kwargs)
  run_get_overlap(mouse=mouse, features='distractor', task='DualGo', day='last', **kwargs)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
    loading files from /home/leon/dual_task/src./data/JawsM15
    ##########################################
    MODEL: SCALER None IMBALANCE False PRESCREEN 0 PCA False METHOD bolasso FOLDS stratified CLF SVM
    bolasso(clf=Pipeline(steps=[('clf',
                                 LinearSVCCV(Cs=array([1.00000000e-04, 2.63665090e-04, 6.95192796e-04, 1.83298071e-03,
           4.83293024e-03, 1.27427499e-02, 3.35981829e-02, 8.85866790e-02,
           2.33572147e-01, 6.15848211e-01, 1.62377674e+00, 4.28133240e+00,
           1.12883789e+01, 2.97635144e+01, 7.84759970e+01, 2.06913808e+02,
           5.45559478e+02, 1.43844989e+03, 3.79269019e+03, 1.00000000e+04]),
                                             cv=StratifiedKFold(n_splits=5, random_state=574, shuffle=True),
                                             max_iter=5000, random_state=574,
                                             tol=0.001))]),
            n_jobs=115, verbose=1)
    ##########################################
    DATA: FEATURES distractor TASK Dual TRIALS correct DAYS first LASER 1
    ##########################################
    multiple days
    X_S1 (65, 693, 84) X_S2 (63, 693, 84)
    X_avg (128, 693)
    boots_coefs (1000, 693)
    p_val (693,)
    significant 614
    X_fs (128, 614)
    samples (128,) features (693,) non zero 614
    ##########################################
    DATA: FEATURES sample TASK DualGo TRIALS correct DAYS first LASER 1
    ##########################################
    multiple days
    X_S1 (31, 693, 84) X_S2 (34, 693, 84)
    X (65, 693, 84) y (65,)
  bootstrap: 100% 1000/1000 [00:03<00:00, 303.83it/s]
    loading files from /home/leon/dual_task/src./data/JawsM15
    ##########################################
    MODEL: SCALER None IMBALANCE False PRESCREEN 0 PCA False METHOD bolasso FOLDS stratified CLF SVM
    bolasso(clf=Pipeline(steps=[('clf',
                                 LinearSVCCV(Cs=array([1.00000000e-04, 2.63665090e-04, 6.95192796e-04, 1.83298071e-03,
           4.83293024e-03, 1.27427499e-02, 3.35981829e-02, 8.85866790e-02,
           2.33572147e-01, 6.15848211e-01, 1.62377674e+00, 4.28133240e+00,
           1.12883789e+01, 2.97635144e+01, 7.84759970e+01, 2.06913808e+02,
           5.45559478e+02, 1.43844989e+03, 3.79269019e+03, 1.00000000e+04]),
                                             cv=StratifiedKFold(n_splits=5, random_state=9033, shuffle=True),
                                             max_iter=5000, random_state=9033,
                                             tol=0.001))]),
            n_jobs=115, verbose=1)
    ##########################################
    DATA: FEATURES distractor TASK Dual TRIALS correct DAYS last LASER 1
    ##########################################
    multiple days
    X_S1 (73, 693, 84) X_S2 (75, 693, 84)
    X_avg (148, 693)
    boots_coefs (1000, 693)
    p_val (693,)
    significant 607
    X_fs (148, 607)
    samples (148,) features (693,) non zero 607
    ##########################################
    DATA: FEATURES sample TASK DualGo TRIALS correct DAYS last LASER 1
    ##########################################
    multiple days
    X_S1 (34, 693, 84) X_S2 (39, 693, 84)
    X (73, 693, 84) y (73,)
  bootstrap: 100% 1000/1000 [00:03<00:00, 293.95it/s]
#+end_example
[[file:./.ob-jupyter/20092186c592c60f9f73dca8aa98e6163f66c7cb.png]]
:END:
