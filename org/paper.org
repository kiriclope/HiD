# -*- org-image-actual-width: nil; -*- # https://www.miskatonic.org/2016/08/25/image-display-size-in-org/
#+TITLE: Paper Outline
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results raw drawer :exports both :async t :session dual_data :kernel dual_data

* A few imports
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
:results:
# Out[1]:
:end:

# Out[1]:

#+begin_src ipython
  import os
  import sys

  sys.path.insert(0, '../dual_task')
  current_dir = os.path.dirname(os.path.abspath('__file__'))
  # Get parent directory (= the project root)
  project_root = os.path.join(current_dir, '..')
  # Append to system path
  sys.path.append(project_root)

  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
:results:
# Out[10]:
:end:

#+begin_src ipython
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  from dual_data.common.fig_grid import create_grid

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6

  matplotlib.rcParams['figure.figsize'] = [width, width * golden_ratio ]
  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:results:
# Out[3]:
:end:

#+begin_src ipython :results drawer
  # print('a test figure')
  # plt.figure()
  # plt.plot([1,2,3,4], '-o')
  # plt.xlabel('x')
  # plt.show()
#+end_src

#+RESULTS:
:results:
a test figure
:end:

* TODO Figure 1
* DONE Figure 2
** Cross Temporal Decoding Analysis
*** imports
#+begin_src ipython
  from dual_data.decode.mne_cross_temp import run_mne_cross_temp
#+end_src

#+RESULTS:
:results:
# Out[3]:
:end:

*** parameters
#+begin_src ipython
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  # kwargs = {'features':'sample', 'bootstrap':0, 'prescreen':'fpr', 'pval':0.15}
  kwargs = {'features':'sample', 'bootstrap':0, 'prescreen': 0, 'pval':0.05, 'trial':'correct'}
#+end_src

#+RESULTS:
:results:
# Out[75]:
:end:
*** Run
#+begin_src ipython

    for mouse in mice:
        for task in tasks:
            for day in ['first', 'last']:
                run_mne_cross_temp(mouse=mouse, task=task, day=day, **kwargs);
                plt.close('all')
#+end_src

#+RESULTS:
:results:
# Out[76]:
[[file:./obipy-resources/dsyT0K.png]]
:end:

** Figure
*** generate
#+begin_src ipython

  def figname(task, day):
    return "JawsM15_sample_cross_temp_score_" + task + "_" + day + ".svg"

  figlist = ['../figs/' + figname(task, day) for day in days for task in tasks]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "fig_final.svg", dim=[3,2])

  #+end_src

  #+RESULTS:
  :results:
  # Out[77]:
  :end:

*** show
#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:./fig_final.svg]]

** Methods
add methods here
* Figure 3
** Temporal Decoding Analysis
*** Imports
#+begin_src ipython
  from dual_data.decode.mne_scores import run_mne_scores
#+end_src

#+RESULTS:
:results:
# Out[18]:
:end:

*** Parameters
#+begin_src ipython
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  kwargs = {'bootstrap':0,
            'prescreen': None, 'pval':0.05,
            'trials':'correct', 'balance':1,
            'method':None,
            'clf':'SVM', 'scaler':None,
            'out_fold':'repeated', 'n_repeats':10,
           }
#+end_src

#+RESULTS:
:results:
# Out[71]:
:end:

*** Run
#+begin_src ipython
  mouse = 'JawsM15'
  task = 'DualGo'
  features = 'sample'
  run_mne_scores(mouse=mouse, task=task, features=features, day='first', **kwargs)
  run_mne_scores(mouse=mouse, task=task, features=features, day='last', **kwargs)
#+end_src

#+RESULTS:
:results:
0 - dfddd401-a677-43a8-8c00-65af4c12eb6b
:end:

#+begin_src ipython
  for mouse in mice:
      for task in ['DualGo']:
          for day in ['first', 'last']:
              run_mne_scores(mouse=mouse, task=task, day=day, **kwargs);
#+end_src

#+RESULTS:
:results:
# Out[15]:
[[file:./obipy-resources/jx39sp.png]]
:end:

** Figure
*** generate
#+begin_src ipython

  def figname(task):
    return "JawsM15_sample_score_" + task + ".svg"

  figlist = ['../figs/' + figname(task) for task in tasks]
  print(figlist)

  golden_ratio = (5**.5 - 1) / 2
  width = 4.3
  height = width * golden_ratio * 1.4
  figsize = [width, height]
  matplotlib.rcParams['lines.markersize'] = 5.5

  create_grid(figlist, "sample_scores.svg", dim=[3,1])

  #+end_src

  #+RESULTS:
  :results:
  # Out[17]:
  :end:

*** show
#+NAME: fig:temporal_decoding
#+CAPTION: Temporal Decoding
#+ATTR_ORG: :width 1200
#+ATTR_LATEX: :width 5in
[[file:./sample_scores.svg]]

* Figure 4
** Overlaps
*** Imports

#+begin_src ipython
  from dual_data.overlap.get_overlap import run_get_overlap
#+end_src

#+RESULTS:
:results:
# Out[35]:
:end:

*** Sample Overlap
**** Parameters
#+begin_src ipython
  mice = ['JawsM15']
  tasks = ['DPA', 'DualGo', 'DualNoGo']
  days = ['first', 'last']

  kwargs = dict()
  kwargs = {'prescreen': 0, 'pval':0.05, 'trials':'correct', 'balance':0
            , 'method':'bolasso', 'bolasso_pval':0.001, 'scaler':None}
#+end_src

#+RESULTS:
:results:
# Out[51]:
:end:

**** single mouse

#+begin_src ipython :results raw drawer :exports both :async t :session dual_data
  mouse = 'JawsM15'
  run_get_overlap(mouse=mouse, features='distractor', task='DualGo', day='first', **kwargs)
  run_get_overlap(mouse=mouse, features='distractor', task='DualGo', day='last', **kwargs)
#+end_src

#+RESULTS:
:results:
# Out[52]:
[[file:./obipy-resources/4H8XHJ.png]]
:end:
